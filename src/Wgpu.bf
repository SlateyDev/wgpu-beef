// --------------- DO NOT EDIT --------------
// -- This file is automatically generated --
//
// Date: 20. 5. 2022 15:24:56
// Enums: 53
// Structs: 96
// Functions: 131

using System;
using System.Interop;

namespace Wgpu {
	public static class Wgpu {
		public enum AdapterType : c_uint {
			DiscreteGPU = 0x00000001,
			IntegratedGPU = 0x00000002,
			CPU = 0x00000003,
			Unknown = 0x00000004,
			Force32 = 0x7FFFFFFF,
		}

		public enum AddressMode : c_uint {
			Undefined = 0x00000000,
			ClampToEdge = 0x00000001,
			Repeat = 0x00000002,
			MirrorRepeat = 0x00000003,
			Force32 = 0x7FFFFFFF,
		}

		public enum BackendType : c_uint {
			Undefined = 0x00000000,
			Null = 0x00000001,
			WebGPU = 0x00000002,
			D3D11 = 0x00000003,
			D3D12 = 0x00000004,
			Metal = 0x00000005,
			Vulkan = 0x00000006,
			OpenGL = 0x00000007,
			OpenGLES = 0x00000008,
			Force32 = 0x7FFFFFFF,
		}

		public enum BlendFactor : c_uint {
			Undefined = 0x00000000,
			Zero = 0x00000001,
			One = 0x00000002,
			Src = 0x00000003,
			OneMinusSrc = 0x00000004,
			SrcAlpha = 0x00000005,
			OneMinusSrcAlpha = 0x00000006,
			Dst = 0x00000007,
			OneMinusDst = 0x00000008,
			DstAlpha = 0x00000009,
			OneMinusDstAlpha = 0x0000000A,
			SrcAlphaSaturated = 0x0000000B,
			Constant = 0x0000000C,
			OneMinusConstant = 0x0000000D,
			Src1 = 0x0000000E,
			OneMinusSrc1 = 0x0000000F,
			Src1Alpha = 0x00000010,
			OneMinusSrc1Alpha = 0x00000011,
			Force32 = 0x7FFFFFFF,
		}

		public enum BlendOperation : c_uint {
			Undefined = 0x00000000,
			Add = 0x00000001,
			Subtract = 0x00000002,
			ReverseSubtract = 0x00000003,
			Min = 0x00000004,
			Max = 0x00000005,
			Force32 = 0x7FFFFFFF
		}

		public enum BufferBindingType : c_uint {
			BindingNotUsed = 0x00000000,
			Undefined = 0x00000001,
			Uniform = 0x00000002,
			Storage = 0x00000003,
			ReadOnlyStorage = 0x00000004,
			Force32 = 0x7FFFFFFF
		}

		public enum BufferMapState : c_uint {
			Unmapped = 0x00000001,
			Pending = 0x00000002,
			Mapped = 0x00000003,
			Force32 = 0x7FFFFFFF
		}

		enum CallbackMode : c_uint {
			WaitAnyOnly = 0x00000001,
			AllowProcessEvents = 0x00000002,
			AllowSpontaneous = 0x00000003,
			Force32 = 0x7FFFFFFF
		}

		/*public enum BufferMapAsyncStatus : c_uint {
			Success = 0,
			Error = 1,
			Unknown = 2,
			DeviceLost = 3,
			DestroyedBeforeCallback = 4,
			UnmappedBeforeCallback = 5,
			Force32 = 0x7FFFFFFF,
		}*/

		public enum CompareFunction : c_uint {
			Undefined = 0x00000000,
			Never = 0x00000001,
			Less = 0x00000002,
			Equal = 0x00000003,
			LessEqual = 0x00000004,
			Greater = 0x00000005,
			NotEqual = 0x00000006,
			GreaterEqual = 0x00000007,
			Always = 0x00000008,
			Force32 = 0x7FFFFFFF,
		}

		public enum CompilationInfoRequestStatus : c_uint {
			Success = 0x00000001,
			InstanceDropped = 0x00000002,
			Error = 0x00000003,
			Unknown = 0x00000004,
			Force32 = 0x7FFFFFFF,
		}

		public enum CompilationMessageType : c_uint {
			Error = 0x00000001,
			Warning = 0x00000002,
			Info = 0x00000003,
			Force32 = 0x7FFFFFFF,
		}

		/*public enum ComputePassTimestampLocation : c_uint {
			Beginning = 0,
			End = 1,
			Force32 = 0x7FFFFFFF,
		}*/

		public enum CompositeAlphaMode : c_uint {
			Auto = 0x00000000,
			Opaque = 0x00000001,
			Premultiplied = 0x00000002,
			Unpremultiplied = 0x00000003,
			Inherit = 0x00000004,
			Force32 = 0x7FFFFFFF
		}

		public enum CreatePipelineAsyncStatus : c_uint {
			Success = 0x00000001,
			InstanceDropped = 0x00000002,
			ValidationError = 0x00000003,
			InternalError = 0x00000004,
			Unknown = 0x00000005,
			Force32 = 0x7FFFFFFF,
		}

		public enum CullMode : c_uint {
			Undefined = 0x00000000,
			None = 0x00000001,
			Front = 0x00000002,
			Back = 0x00000003,
			Force32 = 0x7FFFFFFF,
		}

		public enum DeviceLostReason : c_uint {
			Unknown = 0x00000001,
			Destroyed = 0x00000002,
			InstanceDropped = 0x00000003,
			FailedCreation = 0x00000004,
			Force32 = 0x7FFFFFFF,
		}

		public enum ErrorFilter : c_uint {
			Validation = 0x00000001,
			OutOfMemory = 0x00000002,
			Internal = 0x00000003,
			Force32 = 0x7FFFFFFF,
		}

		public enum ErrorType : c_uint {
			NoError = 0x00000001,
			Validation = 0x00000002,
			OutOfMemory = 0x00000003,
			Internal = 0x00000004,
			Unknown = 0x00000005,
			Force32 = 0x7FFFFFFF,
		}

		public enum FeatureLevel : c_uint {
			Compatibility = 0x00000001,
			Core = 0x00000002,
			Force32 = 0x7FFFFFFF
		}

		public enum FeatureName : c_uint {
			Undefined = 0x00000000,
			DepthClipControl = 0x00000001,
			Depth32FloatStencil8 = 0x00000002,
			TimestampQuery = 0x00000003,
			TextureCompressionBC = 0x00000004,
			TextureCompressionBCSliced3D = 0x00000005,
			TextureCompressionETC2 = 0x00000006,
			TextureCompressionASTC = 0x00000007,
			TextureCompressionASTCSliced3D = 0x00000008,
			IndirectFirstInstance = 0x00000009,
			ShaderF16 = 0x0000000A,
			RG11B10UfloatRenderable = 0x0000000B,
			BGRA8UnormStorage = 0x0000000C,
			Float32Filterable = 0x0000000D,
			Float32Blendable = 0x0000000E,
			ClipDistances = 0x0000000F,
			DualSourceBlending = 0x00000010,
			Force32 = 0x7FFFFFFF
		}

		public enum FilterMode : c_uint {
			Undefined = 0x00000000,
			Nearest = 0x00000001,
			Linear = 0x00000002,
			Force32 = 0x7FFFFFFF,
		}

		public enum FrontFace : c_uint {
			Undefined = 0x00000000,
			CCW = 0x00000001,
			CW = 0x00000002,
			Force32 = 0x7FFFFFFF,
		}

		public enum IndexFormat : c_uint {
			Undefined = 0x00000000,
			Uint16 = 0x00000001,
			Uint32 = 0x00000002,
			Force32 = 0x7FFFFFFF,
		}

		public enum LoadOp : c_uint {
			Undefined = 0x00000000,
			Load = 0x00000001,
			Clear = 0x00000002,
			Force32 = 0x7FFFFFFF,
		}

		public enum MapAsyncStatus : c_uint {
			Success = 0x00000001,
			InstanceDropped = 0x00000002,
			Error = 0x00000003,
			Aborted = 0x00000004,
			Unknown = 0x00000005,
			Force32 = 0x7FFFFFFF
		}

		public enum MipmapFilterMode : c_uint {
			Undefined = 0x00000000,
			Nearest = 0x00000001,
			Linear = 0x00000002,
			Force32 = 0x7FFFFFFF,
		}

		public enum OptionalBool : c_uint {
			False = 0x00000000,
			True = 0x00000001,
			Undefined = 0x00000002,
			Force32 = 0x7FFFFFFF
		}

		public enum PopErrorScopeStatus : c_uint {
			Success = 0x00000001,
			InstanceDropped = 0x00000002,
			EmptyStack = 0x00000003,
			Force32 = 0x7FFFFFFF
		}

		/*public enum PipelineStatisticName : c_uint {
			VertexShaderInvocations = 0,
			ClipperInvocations = 1,
			ClipperPrimitivesOut = 2,
			FragmentShaderInvocations = 3,
			ComputeShaderInvocations = 4,
			Force32 = 0x7FFFFFFF,
		}*/

		public enum PowerPreference : c_uint {
			Undefined = 0x00000000,
			LowPower = 0x00000001,
			HighPerformance = 0x00000002,
			Force32 = 0x7FFFFFFF,
		}

		/*public enum PredefinedColorSpace : c_uint {
			Undefined = 0,
			Srgb = 1,
			Force32 = 0x7FFFFFFF,
		}*/

		public enum PresentMode : c_uint {
			Undefined = 0x00000000,
			Fifo = 0x00000001,
			FifoRelaxed = 0x00000002,
			Immediate = 0x00000003,
			Mailbox = 0x00000004,
			Force32 = 0x7FFFFFFF,
		}

		public enum PrimitiveTopology : c_uint {
			Undefined = 0x00000000,
			PointList = 0x00000001,
			LineList = 0x00000002,
			LineStrip = 0x00000003,
			TriangleList = 0x00000004,
			TriangleStrip = 0x00000005,
			Force32 = 0x7FFFFFFF,
		}

		public enum QueryType : c_uint {
			Occlusion = 0x00000001,
			Timestamp = 0x00000002,
			Force32 = 0x7FFFFFFF,
		}

		public enum QueueWorkDoneStatus : c_uint {
			Success = 0x00000001,
			InstanceDropped = 0x00000002,
			Error = 0x00000003,
			Unknown = 0x00000004,
			Force32 = 0x7FFFFFFF,
		}

		/*public enum RenderPassTimestampLocation : c_uint {
			Beginning = 0,
			End = 1,
			Force32 = 0x7FFFFFFF,
		}*/

		public enum RequestAdapterStatus : c_uint {
			Success = 0x00000001,
			InstanceDropped = 0x00000002,
			Unavailable = 0x00000003,
			Error = 0x00000004,
			Unknown = 0x00000005,
			Force32 = 0x7FFFFFFF,
		}

		public enum RequestDeviceStatus : c_uint {
			Success = 0x00000001,
			InstanceDropped = 0x00000002,
			Error = 0x00000003,
			Unknown = 0x00000004,
			Force32 = 0x7FFFFFFF,
		}

		public enum SType : c_uint {
			ShaderSourceSPIRV = 0x00000001,
			ShaderSourceWGSL = 0x00000002,
			RenderPassMaxDrawCount = 0x00000003,
			SurfaceSourceMetalLayer = 0x00000004,
			SurfaceSourceWindowsHWND = 0x00000005,
			SurfaceSourceXlibWindow = 0x00000006,
			SurfaceSourceWaylandSurface = 0x00000007,
			SurfaceSourceAndroidNativeWindow = 0x00000008,
			SurfaceSourceXCBWindow = 0x00000009,
			Force32 = 0x7FFFFFFF,
		}

		public enum SamplerBindingType : c_uint {
			BindingNotUsed = 0x00000000,
			Undefined = 0x00000001,
			Filtering = 0x00000002,
			NonFiltering = 0x00000003,
			Comparison = 0x00000004,
			Force32 = 0x7FFFFFFF,
		}

		public enum Status : c_uint {
			Success = 0x00000001,
			Error = 0x00000002,
			Force32 = 0x7FFFFFFF
		}

		public enum StencilOperation : c_uint {
			Undefined = 0x00000000,
			Keep = 0x00000001,
			Zero = 0x00000002,
			Replace = 0x00000003,
			Invert = 0x00000004,
			IncrementClamp = 0x00000005,
			DecrementClamp = 0x00000006,
			IncrementWrap = 0x00000007,
			DecrementWrap = 0x00000008,
			Force32 = 0x7FFFFFFF,
		}

		public enum StorageTextureAccess : c_uint {
			BindingNotUsed = 0x00000000,
			Undefined = 0x00000001,
			WriteOnly = 0x00000002,
			ReadOnly = 0x00000003,
			ReadWrite = 0x00000004,
			Force32 = 0x7FFFFFFF,
		}

		public enum StoreOp : c_uint {
			Undefined = 0x00000000,
			Store = 0x00000001,
			Discard = 0x00000002,
			Force32 = 0x7FFFFFFF,
		}

		public enum WGPUSurfaceGetCurrentTextureStatus : c_uint {
			SuccessOptimal = 0x00000001,
			SuccessSuboptimal = 0x00000002,
			Timeout = 0x00000003,
			Outdated = 0x00000004,
			Lost = 0x00000005,
			OutOfMemory = 0x00000006,
			DeviceLost = 0x00000007,
			Error = 0x00000008,
			Force32 = 0x7FFFFFFF
		}

		public enum TextureAspect : c_uint {
			Undefined = 0x00000000,
			All = 0x00000001,
			StencilOnly = 0x00000002,
			DepthOnly = 0x00000003,
			Force32 = 0x7FFFFFFF
		}

		/*public enum TextureComponentType : c_uint {
			Float = 0,
			Sint = 1,
			Uint = 2,
			DepthComparison = 3,
			Force32 = 0x7FFFFFFF,
		}*/

		public enum TextureDimension : c_uint {
			Undefined = 0x00000000,
			_1D = 0x00000001,
			_2D = 0x00000002,
			_3D = 0x00000003,
			Force32 = 0x7FFFFFFF,
		}

		public enum TextureFormat : c_uint {
			Undefined = 0x00000000,
			R8Unorm = 0x00000001,
			R8Snorm = 0x00000002,
			R8Uint = 0x00000003,
			R8Sint = 0x00000004,
			R16Uint = 0x00000005,
			R16Sint = 0x00000006,
			R16Float = 0x00000007,
			RG8Unorm = 0x00000008,
			RG8Snorm = 0x00000009,
			RG8Uint = 0x0000000A,
			RG8Sint = 0x0000000B,
			R32Float = 0x0000000C,
			R32Uint = 0x0000000D,
			R32Sint = 0x0000000E,
			RG16Uint = 0x0000000F,
			RG16Sint = 0x00000010,
			RG16Float = 0x00000011,
			RGBA8Unorm = 0x00000012,
			RGBA8UnormSrgb = 0x00000013,
			RGBA8Snorm = 0x00000014,
			RGBA8Uint = 0x00000015,
			RGBA8Sint = 0x00000016,
			BGRA8Unorm = 0x00000017,
			BGRA8UnormSrgb = 0x00000018,
			RGB10A2Uint = 0x00000019,
			RGB10A2Unorm = 0x0000001A,
			RG11B10Ufloat = 0x0000001B,
			RGB9E5Ufloat = 0x0000001C,
			RG32Float = 0x0000001D,
			RG32Uint = 0x0000001E,
			RG32Sint = 0x0000001F,
			RGBA16Uint = 0x00000020,
			RGBA16Sint = 0x00000021,
			RGBA16Float = 0x00000022,
			RGBA32Float = 0x00000023,
			RGBA32Uint = 0x00000024,
			RGBA32Sint = 0x00000025,
			Stencil8 = 0x00000026,
			Depth16Unorm = 0x00000027,
			Depth24Plus = 0x00000028,
			Depth24PlusStencil8 = 0x00000029,
			Depth32Float = 0x0000002A,
			Depth32FloatStencil8 = 0x0000002B,
			BC1RGBAUnorm = 0x0000002C,
			BC1RGBAUnormSrgb = 0x0000002D,
			BC2RGBAUnorm = 0x0000002E,
			BC2RGBAUnormSrgb = 0x0000002F,
			BC3RGBAUnorm = 0x00000030,
			BC3RGBAUnormSrgb = 0x00000031,
			BC4RUnorm = 0x00000032,
			BC4RSnorm = 0x00000033,
			BC5RGUnorm = 0x00000034,
			BC5RGSnorm = 0x00000035,
			BC6HRGBUfloat = 0x00000036,
			BC6HRGBFloat = 0x00000037,
			BC7RGBAUnorm = 0x00000038,
			BC7RGBAUnormSrgb = 0x00000039,
			ETC2RGB8Unorm = 0x0000003A,
			ETC2RGB8UnormSrgb = 0x0000003B,
			ETC2RGB8A1Unorm = 0x0000003C,
			ETC2RGB8A1UnormSrgb = 0x0000003D,
			ETC2RGBA8Unorm = 0x0000003E,
			ETC2RGBA8UnormSrgb = 0x0000003F,
			EACR11Unorm = 0x00000040,
			EACR11Snorm = 0x00000041,
			EACRG11Unorm = 0x00000042,
			EACRG11Snorm = 0x00000043,
			ASTC4x4Unorm = 0x00000044,
			ASTC4x4UnormSrgb = 0x00000045,
			ASTC5x4Unorm = 0x00000046,
			ASTC5x4UnormSrgb = 0x00000047,
			ASTC5x5Unorm = 0x00000048,
			ASTC5x5UnormSrgb = 0x00000049,
			ASTC6x5Unorm = 0x0000004A,
			ASTC6x5UnormSrgb = 0x0000004B,
			ASTC6x6Unorm = 0x0000004C,
			ASTC6x6UnormSrgb = 0x0000004D,
			ASTC8x5Unorm = 0x0000004E,
			ASTC8x5UnormSrgb = 0x0000004F,
			ASTC8x6Unorm = 0x00000050,
			ASTC8x6UnormSrgb = 0x00000051,
			ASTC8x8Unorm = 0x00000052,
			ASTC8x8UnormSrgb = 0x00000053,
			ASTC10x5Unorm = 0x00000054,
			ASTC10x5UnormSrgb = 0x00000055,
			ASTC10x6Unorm = 0x00000056,
			ASTC10x6UnormSrgb = 0x00000057,
			ASTC10x8Unorm = 0x00000058,
			ASTC10x8UnormSrgb = 0x00000059,
			ASTC10x10Unorm = 0x0000005A,
			ASTC10x10UnormSrgb = 0x0000005B,
			ASTC12x10Unorm = 0x0000005C,
			ASTC12x10UnormSrgb = 0x0000005D,
			ASTC12x12Unorm = 0x0000005E,
			ASTC12x12UnormSrgb = 0x0000005F,
			Force32 = 0x7FFFFFFF,
		}

		public enum TextureSampleType : c_uint {
			BindingNotUsed = 0x00000000,
			Undefined = 0x00000001,
			Float = 0x00000002,
			UnfilterableFloat = 0x00000003,
			Depth = 0x00000004,
			Sint = 0x00000005,
			Uint = 0x00000006,
			Force32 = 0x7FFFFFFF,
		}

		public enum TextureViewDimension : c_uint {
			Undefined = 0x00000000,
			_1D = 0x00000001,
			_2D = 0x00000002,
			_2DArray = 0x00000003,
			Cube = 0x00000004,
			CubeArray = 0x00000005,
			_3D = 0x00000006,
			Force32 = 0x7FFFFFFF,
		}

		public enum VertexFormat : c_uint {
			Uint8 = 0x00000001,
			Uint8x2 = 0x00000002,
			Uint8x4 = 0x00000003,
			Sint8 = 0x00000004,
			Sint8x2 = 0x00000005,
			Sint8x4 = 0x00000006,
			Unorm8 = 0x00000007,
			Unorm8x2 = 0x00000008,
			Unorm8x4 = 0x00000009,
			Snorm8 = 0x0000000A,
			Snorm8x2 = 0x0000000B,
			Snorm8x4 = 0x0000000C,
			Uint16 = 0x0000000D,
			Uint16x2 = 0x0000000E,
			Uint16x4 = 0x0000000F,
			Sint16 = 0x00000010,
			Sint16x2 = 0x00000011,
			Sint16x4 = 0x00000012,
			Unorm16 = 0x00000013,
			Unorm16x2 = 0x00000014,
			Unorm16x4 = 0x00000015,
			Snorm16 = 0x00000016,
			Snorm16x2 = 0x00000017,
			Snorm16x4 = 0x00000018,
			Float16 = 0x00000019,
			Float16x2 = 0x0000001A,
			Float16x4 = 0x0000001B,
			Float32 = 0x0000001C,
			Float32x2 = 0x0000001D,
			Float32x3 = 0x0000001E,
			Float32x4 = 0x0000001F,
			Uint32 = 0x00000020,
			Uint32x2 = 0x00000021,
			Uint32x3 = 0x00000022,
			Uint32x4 = 0x00000023,
			Sint32 = 0x00000024,
			Sint32x2 = 0x00000025,
			Sint32x3 = 0x00000026,
			Sint32x4 = 0x00000027,
			Unorm10_10_10_2 = 0x00000028,
			Unorm8x4BGRA = 0x00000029,
			Force32 = 0x7FFFFFFF,
		}

		public enum VertexStepMode : c_uint {
			VertexBufferNotUsed = 0x00000000,
			Undefined = 0x00000001,
			Vertex = 0x00000002,
			Instance = 0x00000003,
			Force32 = 0x7FFFFFFF,
		}

		public enum WGSLLanguageFeatureName : c_uint {
			ReadonlyAndReadwriteStorageTextures = 0x00000001,
			Packed4x8IntegerDotProduct = 0x00000002,
			UnrestrictedPointerParameters = 0x00000003,
			PointerCompositeAccess = 0x00000004,
			Force32 = 0x7FFFFFFF
		}

		public enum WaitStatus : c_uint {
			Success = 0x00000001,
			TimedOut = 0x00000002,
			UnsupportedTimeout = 0x00000003,
			UnsupportedCount = 0x00000004,
			UnsupportedMixedSources = 0x00000005,
			Force32 = 0x7FFFFFFF
		}

		public enum BufferUsage : c_ulong {
			None = 0x0000000000000000,
			MapRead = 0x0000000000000001,
			MapWrite = 0x0000000000000002,
			CopySrc = 0x0000000000000004,
			CopyDst = 0x0000000000000008,
			Index = 0x0000000000000010,
			Vertex = 0x0000000000000020,
			Uniform = 0x0000000000000040,
			Storage = 0x0000000000000080,
			Indirect = 0x0000000000000100,
			QueryResolve = 0x0000000000000200
		}

		public enum ColorWriteMask : c_ulong {
			None = 0x0000000000000000,
			Red = 0x0000000000000001,
			Green = 0x0000000000000002,
			Blue = 0x0000000000000004,
			Alpha = 0x0000000000000008,
			All = 0x000000000000000F /* Red | Green | Blue | Alpha */
		}

		public enum MapMode : c_ulong {
			None = 0x0000000000000000,
			Read = 0x0000000000000001,
			Write = 0x0000000000000002,
		}

		public enum ShaderStage : c_ulong {
			None = 0x0000000000000000,
			Vertex = 0x0000000000000001,
			Fragment = 0x0000000000000002,
			Compute = 0x0000000000000004,
		}

		public enum TextureUsage : c_ulong {
			None = 0x0000000000000000,
			CopySrc = 0x0000000000000001,
			CopyDst = 0x0000000000000002,
			TextureBinding = 0x0000000000000004,
			StorageBinding = 0x0000000000000008,
			RenderAttachment = 0x0000000000000010,
		}

		//TODO: Continue conversion of webgpu.h to latest (637+ old, 1179+ new)

		public enum NativeSType : c_uint {
			DeviceExtras = 0x00030001,
			NativeLimits = 0x00030002,
			PipelineLayoutExtras = 0x00030003,
			ShaderModuleGLSLDescriptor = 0x00030004,
			InstanceExtras = 0x00030006,
			BindGroupEntryExtras = 0x00030007,
			BindGroupLayoutEntryExtras = 0x00030008,
			QuerySetDescriptorExtras = 0x00030009,
			SurfaceConfigurationExtras = 0x0003000A,
			Force32 = 0x7FFFFFFF,
		}

		public enum NativeFeature : c_uint {
			PushConstants = 0x00030001,
			TextureAdapterSpecificFormatFeatures = 0x00030002,
			MultiDrawIndirect = 0x00030003,
			MultiDrawIndirectCount = 0x00030004,
			VertexWritableStorage = 0x00030005,
			TextureBindingArray = 0x00030006,
			SampledTextureAndStorageBufferArrayNonUniformIndexing = 0x00030007,
			PipelineStatisticsQuery = 0x00030008,
			StorageResourceBindingArray = 0x00030009,
			PartiallyBoundBindingArray = 0x0003000A,
			TextureFormat16bitNorm = 0x0003000B,
			TextureCompressionAstcHdr = 0x0003000C,
			MappablePrimaryBuffers = 0x0003000E,
			BufferBindingArray = 0x0003000F,
			UniformBufferAndStorageTextureArrayNonUniformIndexing = 0x00030010,
			SpirvShaderPassthrough = 0x00030017,
			VertexAttribute64bit = 0x00030019,
			TextureFormatNv12 = 0x0003001A,
			RayTracingAccelerationStructure = 0x0003001B,
			RayQuery = 0x0003001C,
			ShaderF64 = 0x0003001D,
			ShaderI16 = 0x0003001E,
			ShaderPrimitiveIndex = 0x0003001F,
			ShaderEarlyDepthTest = 0x00030020,
			Subgroup = 0x00030021,
			SubgroupVertex = 0x00030022,
			SubgroupBarrier = 0x00030023,
			TimestampQueryInsideEncoders = 0x00030024,
			TimestampQueryInsidePasses = 0x00030025,
			Force32 = 0x7FFFFFFF
		}

		public enum LogLevel : c_uint {
			Off = 0x00000000,
			Error = 0x00000001,
			Warn = 0x00000002,
			Info = 0x00000003,
			Debug = 0x00000004,
			Trace = 0x00000005,
			Force32 = 0x7FFFFFFF
		}

		public enum InstanceBackend : c_uint {
			All = 0x00000000,
			Vulkan = 1 << 0,
			GL = 1 << 1,
			Metal = 1 << 2,
			DX12 = 1 << 3,
			DX11 = 1 << 4,
			BrowserWebGPU = 1 << 5,
			Primary = (1 << 0) | (1 << 2) | (1 << 3) | (1 << 5),
			Secondary = (1 << 1) | (1 << 4),
			Force32 = 0x7FFFFFFF
		}

		public enum InstanceFlag : c_uint {
			Default = 0x00000000,
			Debug = 1 << 0,
			Validation = 1 << 1,
			DiscardHalLabels = 1 << 2,
			Force32 = 0x7FFFFFFF
		}

		public enum Dx12Compiler : c_uint {
			Undefined = 0x00000000,
			Fxc = 0x00000001,
			Dxc = 0x00000002,
			Force32 = 0x7FFFFFFF
		}

		public enum Gles3MinorVersion : c_uint {
			Automatic = 0x00000000,
			Version0 = 0x00000001,
			Version1 = 0x00000002,
			Version2 = 0x00000003,
			Force32 = 0x7FFFFFFF
		}

		public enum PipelineStatisicName : c_uint {
			VertexShaderInvocations = 0x00000000,
			ClipperInvocations = 0x00000001,
			ClipperPrimitivesOut = 0x00000002,
			FragmentShaderInvocations = 0x00000003,
			ComputeShaderInvocations = 0x00000004,
			Force32 = 0x7FFFFFFF
		}

		public enum NativeQueryType : c_uint {
			PipelineStatistics = 0x00030000,
			Force32 = 0x7FFFFFFF
		}

		public enum NativeTextureFormat : c_uint {
			R16Unorm = 0x00030001,
			R16Snorm = 0x00030002,
			Rg16Unorm = 0x00030003,
			Rg16Snorm = 0x00030004,
			Rgba16Unorm = 0x00030005,
			Rgba16Snorm = 0x00030006,
			NV12 = 0x00030007,
		}

		[CRepr]
		public struct WGPUStringView {
		    c_char* data;
		    c_size length;

			public this() {
				this = default;
			}

			public this(StringView stringView) {
				this.data = stringView.Ptr;
				this.length = (uint)stringView.Length;
			}
		}

		[CRepr]
		public struct Adapter : this(void* Handle) {
			public static Self Null => .(null);

			public c_size GetFeatures(SupportedFeatures* features) => Wgpu.AdapterGetFeatures(this, features);
			public c_bool GetLimits(Limits* limits) => Wgpu.AdapterGetLimits(this, limits);
			public void GetInfo(AdapterInfo* info) => Wgpu.AdapterGetInfo(this, info);
			public c_bool HasFeature(FeatureName feature) => Wgpu.AdapterHasFeature(this, feature);
			public void RequestDevice(DeviceDescriptor* descriptor, RequestDeviceCallbackInfo callbackInfo, void* userdata) => Wgpu.AdapterRequestDevice(this, descriptor, callbackInfo);
		}

		[CRepr]
		public struct BindGroup : this(void* Handle) {
			public static Self Null => .(null);

			public void Release() => Wgpu.wgpuBindGroupRelease(this);
		}

		[CRepr]
		public struct BindGroupLayout : this(void* Handle) {
			public static Self Null => .(null);

			public void Release() => Wgpu.wgpuBindGroupLayoutRelease(this);
		}

		[CRepr]
		public struct Buffer : this(void* Handle) {
			public static Self Null => .(null);

			public void Destroy() => Wgpu.BufferDestroy(this);
			public void* GetConstMappedRange(c_size offset, c_size size) => Wgpu.BufferGetConstMappedRange(this, offset, size);
			public void* GetMappedRange(c_size offset, c_size size) => Wgpu.BufferGetMappedRange(this, offset, size);
			public void MapAsync(MapMode mode, c_size offset, c_size size, BufferMapCallback callback, void* userdata) => Wgpu.BufferMapAsync(this, mode, offset, size, callback, userdata);
			public void Unmap() => Wgpu.BufferUnmap(this);
			public void Release() => Wgpu.BufferRelease(this);
		}

		[CRepr]
		public struct CommandBuffer : this(void* Handle) {
			public static Self Null => .(null);

			public void Release() => Wgpu.CommandBufferRelease(this);
		}

		[CRepr]
		public struct CommandEncoder : this(void* Handle) {
			public static Self Null => .(null);

			public ComputePassEncoder BeginComputePass(ComputePassDescriptor* descriptor) => Wgpu.CommandEncoderBeginComputePass(this, descriptor);
			public RenderPassEncoder BeginRenderPass(RenderPassDescriptor* descriptor) => Wgpu.CommandEncoderBeginRenderPass(this, descriptor);
			public void ClearBuffer(Buffer buffer, uint64 offset, uint64 size) => Wgpu.CommandEncoderClearBuffer(this, buffer, offset, size);
			public void CopyBufferToBuffer(Buffer source, uint64 sourceOffset, Buffer destination, uint64 destinationOffset, uint64 size) => Wgpu.CommandEncoderCopyBufferToBuffer(this, source, sourceOffset, destination, destinationOffset, size);
			public void CopyBufferToTexture(TexelCopyBufferInfo* source, TexelCopyTextureInfo* destination, Extent3D* copySize) => Wgpu.CommandEncoderCopyBufferToTexture(this, source, destination, copySize);
			public void CopyTextureToBuffer(TexelCopyTextureInfo* source, TexelCopyBufferInfo* destination, Extent3D* copySize) => Wgpu.CommandEncoderCopyTextureToBuffer(this, source, destination, copySize);
			public void CopyTextureToTexture(TexelCopyTextureInfo* source, TexelCopyTextureInfo* destination, Extent3D* copySize) => Wgpu.CommandEncoderCopyTextureToTexture(this, source, destination, copySize);
			public CommandBuffer Finish(CommandBufferDescriptor* descriptor) => Wgpu.CommandEncoderFinish(this, descriptor);
			public void InsertDebugMarker(WGPUStringView markerLabel) => Wgpu.CommandEncoderInsertDebugMarker(this, markerLabel);
			public void PopDebugGroup() => Wgpu.CommandEncoderPopDebugGroup(this);
			public void PushDebugGroup(WGPUStringView groupLabel) => Wgpu.CommandEncoderPushDebugGroup(this, groupLabel);
			public void ResolveQuerySet(QuerySet querySet, uint32 firstQuery, uint32 queryCount, Buffer destination, uint64 destinationOffset) => Wgpu.CommandEncoderResolveQuerySet(this, querySet, firstQuery, queryCount, destination, destinationOffset);
			public void WriteTimestamp(QuerySet querySet, uint32 queryIndex) => Wgpu.CommandEncoderWriteTimestamp(this, querySet, queryIndex);
			public void Release() => Wgpu.CommandEncoderRelease(this);
		}

		[CRepr]
		public struct ComputePassEncoder : this(void* Handle) {
			public static Self Null => .(null);

			public void BeginPipelineStatisticsQuery(QuerySet querySet, uint32 queryIndex) => Wgpu.ComputePassEncoderBeginPipelineStatisticsQuery(this, querySet, queryIndex);
			public void DispatchWorkgroups(uint32 workgroupCountX, uint32 workgroupCountY, uint32 workgroupCountZ) => Wgpu.ComputePassEncoderDispatchWorkgroups(this, workgroupCountX, workgroupCountY, workgroupCountZ);
			public void DispatchWorkgroupsIndirect(Buffer indirectBuffer, uint64 indirectOffset) => Wgpu.ComputePassEncoderDispatchWorkgroupsIndirect(this, indirectBuffer, indirectOffset);
			public void End() => Wgpu.ComputePassEncoderEnd(this);
			public void EndPipelineStatisticsQuery() => Wgpu.ComputePassEncoderEndPipelineStatisticsQuery(this);
			public void InsertDebugMarker(WGPUStringView markerLabel) => Wgpu.ComputePassEncoderInsertDebugMarker(this, markerLabel);
			public void PopDebugGroup() => Wgpu.ComputePassEncoderPopDebugGroup(this);
			public void PushDebugGroup(WGPUStringView groupLabel) => Wgpu.ComputePassEncoderPushDebugGroup(this, groupLabel);
			public void SetBindGroup(uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets) => Wgpu.ComputePassEncoderSetBindGroup(this, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
			public void SetPipeline(ComputePipeline pipeline) => Wgpu.ComputePassEncoderSetPipeline(this, pipeline);
		}

		[CRepr]
		public struct ComputePipeline : this(void* Handle) {
			public static Self Null => .(null);

			public BindGroupLayout GetBindGroupLayout(uint32 groupIndex) => Wgpu.ComputePipelineGetBindGroupLayout(this, groupIndex);
			public void SetLabel(WGPUStringView label) => Wgpu.ComputePipelineSetLabel(this, label);
			public void Release() => Wgpu.ComputePipelineRelease(this);
		}

		[CRepr]
		public struct Device : this(void* Handle) {
			public static Self Null => .(null);

			public ShaderModule CreateShaderModuleSpirV(ShaderModuleDescriptorSpirV* descriptor) => Wgpu.DeviceCreateShaderModuleSpirV(this, descriptor);
			public BindGroup CreateBindGroup(BindGroupDescriptor* descriptor) => Wgpu.DeviceCreateBindGroup(this, descriptor);
			public BindGroupLayout CreateBindGroupLayout(BindGroupLayoutDescriptor* descriptor) => Wgpu.DeviceCreateBindGroupLayout(this, descriptor);
			public Buffer CreateBuffer(BufferDescriptor* descriptor) => Wgpu.DeviceCreateBuffer(this, descriptor);
			public CommandEncoder CreateCommandEncoder(CommandEncoderDescriptor* descriptor) => Wgpu.DeviceCreateCommandEncoder(this, descriptor);
			public ComputePipeline CreateComputePipeline(ComputePipelineDescriptor* descriptor) => Wgpu.DeviceCreateComputePipeline(this, descriptor);
			public void CreateComputePipelineAsync(ComputePipelineDescriptor* descriptor, CreateComputePipelineAsyncCallback callback, void* userdata) => Wgpu.DeviceCreateComputePipelineAsync(this, descriptor, callback, userdata);
			public PipelineLayout CreatePipelineLayout(PipelineLayoutDescriptor* descriptor) => Wgpu.DeviceCreatePipelineLayout(this, descriptor);
			public QuerySet CreateQuerySet(QuerySetDescriptor* descriptor) => Wgpu.DeviceCreateQuerySet(this, descriptor);
			public RenderBundleEncoder CreateRenderBundleEncoder(RenderBundleEncoderDescriptor* descriptor) => Wgpu.DeviceCreateRenderBundleEncoder(this, descriptor);
			public RenderPipeline CreateRenderPipeline(RenderPipelineDescriptor* descriptor) => Wgpu.DeviceCreateRenderPipeline(this, descriptor);
			public void CreateRenderPipelineAsync(RenderPipelineDescriptor* descriptor, CreateRenderPipelineAsyncCallback callback, void* userdata) => Wgpu.DeviceCreateRenderPipelineAsync(this, descriptor, callback, userdata);
			public Sampler CreateSampler(SamplerDescriptor* descriptor) => Wgpu.DeviceCreateSampler(this, descriptor);
			public ShaderModule CreateShaderModule(ShaderModuleDescriptor* descriptor) => Wgpu.DeviceCreateShaderModule(this, descriptor);
			//public SwapChain CreateSwapChain(Surface surface, SwapChainDescriptor* descriptor) => Wgpu.DeviceCreateSwapChain(this, surface, descriptor);
			public Texture CreateTexture(TextureDescriptor* descriptor) => Wgpu.DeviceCreateTexture(this, descriptor);
			public void Destroy() => Wgpu.DeviceDestroy(this);
			public c_size GetFeatures(SupportedFeatures* features) => Wgpu.DeviceGetFeatures(this, features);
			public c_bool GetLimits(Limits* limits) => Wgpu.DeviceGetLimits(this, limits);
			public Queue GetQueue() => Wgpu.DeviceGetQueue(this);
			public c_bool HasFeature(FeatureName feature) => Wgpu.DeviceHasFeature(this, feature);
			public Future PopErrorScope(PopErrorScopeCallbackInfo callbackInfo, void* userdata) => Wgpu.DevicePopErrorScope(this, callbackInfo);
			public void PushErrorScope(ErrorFilter filter) => Wgpu.DevicePushErrorScope(this, filter);
			//public void SetDeviceLostCallback(DeviceLostCallback callback, void* userdata) => Wgpu.DeviceSetDeviceLostCallback(this, callback, userdata);
			//public void SetUncapturedErrorCallback(ErrorCallback callback, void* userdata) => Wgpu.DeviceSetUncapturedErrorCallback(this, callback, userdata);
			public void Poll(c_bool wait, uint64* wrappedSubmissionIndex) => Wgpu.DevicePoll(this, wait, wrappedSubmissionIndex);
			public void Release() => Wgpu.DeviceRelease(this);
		}

		[CRepr]
		public struct Instance : this(void* Handle) {
			public static Self Null => .(null);

			public void GenerateReport(GlobalReport* report) => Wgpu.GenerateReport(this, report);
			public c_size EnumerateAdapters(InstanceEnumerateAdapterOptions* options, Adapter* adapters) => Wgpu.InstanceEnumerateAdapters(this, options, adapters);
			public Surface CreateSurface(SurfaceDescriptor* descriptor) => Wgpu.InstanceCreateSurface(this, descriptor);
			public void ProcessEvents() => Wgpu.InstanceProcessEvents(this);
			public void RequestAdapter(RequestAdapterOptions* options, RequestAdapterCallbackInfo callbackInfo) => Wgpu.InstanceRequestAdapter(this, options, callbackInfo);
		}

		[CRepr]
		public struct PipelineLayout : this(void* Handle) {
			public static Self Null => .(null);

			public void Release() => Wgpu.wgpuPipelineLayoutRelease(this);
		}

		[CRepr]
		public struct QuerySet : this(void* Handle) {
			public static Self Null => .(null);

			public void Destroy() => Wgpu.QuerySetDestroy(this);
			public void Release() => Wgpu.wgpuQuerySetRelease(this);
		}

		[CRepr]
		public struct Queue : this(void* Handle) {
			public static Self Null => .(null);

			public uint64 SubmitForIndex(c_size commandCount, CommandBuffer* commands) => Wgpu.QueueSubmitForIndex(this, commandCount, commands);
			public void OnSubmittedWorkDone(QueueWorkDoneCallback callback, void* userdata) => Wgpu.QueueOnSubmittedWorkDone(this, callback, userdata);
			public void Submit(uint32 commandCount, CommandBuffer* commands) => Wgpu.QueueSubmit(this, commandCount, commands);
			public void WriteBuffer(Buffer buffer, uint64 bufferOffset, void* data, c_size size) => Wgpu.QueueWriteBuffer(this, buffer, bufferOffset, data, size);
			public void WriteTexture(TexelCopyTextureInfo* destination, void* data, c_size dataSize, TexelCopyBufferLayout* dataLayout, Extent3D* writeSize) => Wgpu.QueueWriteTexture(this, destination, data, dataSize, dataLayout, writeSize);
		}

		[CRepr]
		public struct RenderBundle : this(void* Handle) {
			public static Self Null => .(null);

			public void Release() => Wgpu.wgpuRenderBundleRelease(this);
		}

		[CRepr]
		public struct RenderBundleEncoder : this(void* Handle) {
			public static Self Null => .(null);

			public void Draw(uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance) => Wgpu.RenderBundleEncoderDraw(this, vertexCount, instanceCount, firstVertex, firstInstance);
			public void DrawIndexed(uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance) => Wgpu.RenderBundleEncoderDrawIndexed(this, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
			public void DrawIndexedIndirect(Buffer indirectBuffer, uint64 indirectOffset) => Wgpu.RenderBundleEncoderDrawIndexedIndirect(this, indirectBuffer, indirectOffset);
			public void DrawIndirect(Buffer indirectBuffer, uint64 indirectOffset) => Wgpu.RenderBundleEncoderDrawIndirect(this, indirectBuffer, indirectOffset);
			public RenderBundle Finish(RenderBundleDescriptor* descriptor) => Wgpu.RenderBundleEncoderFinish(this, descriptor);
			public void InsertDebugMarker(WGPUStringView markerLabel) => Wgpu.RenderBundleEncoderInsertDebugMarker(this, markerLabel);
			public void PopDebugGroup() => Wgpu.RenderBundleEncoderPopDebugGroup(this);
			public void PushDebugGroup(WGPUStringView groupLabel) => Wgpu.RenderBundleEncoderPushDebugGroup(this, groupLabel);
			public void SetBindGroup(uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets) => Wgpu.RenderBundleEncoderSetBindGroup(this, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
			public void SetIndexBuffer(Buffer buffer, IndexFormat format, uint64 offset, uint64 size) => Wgpu.RenderBundleEncoderSetIndexBuffer(this, buffer, format, offset, size);
			public void SetPipeline(RenderPipeline pipeline) => Wgpu.RenderBundleEncoderSetPipeline(this, pipeline);
			public void SetVertexBuffer(uint32 slot, Buffer buffer, uint64 offset, uint64 size) => Wgpu.RenderBundleEncoderSetVertexBuffer(this, slot, buffer, offset, size);
		}

		[CRepr]
		public struct RenderPassEncoder : this(void* Handle) {
			public static Self Null => .(null);

			public void BeginOcclusionQuery(uint32 queryIndex) => Wgpu.RenderPassEncoderBeginOcclusionQuery(this, queryIndex);
			public void BeginPipelineStatisticsQuery(QuerySet querySet, uint32 queryIndex) => Wgpu.RenderPassEncoderBeginPipelineStatisticsQuery(this, querySet, queryIndex);
			public void Draw(uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance) => Wgpu.RenderPassEncoderDraw(this, vertexCount, instanceCount, firstVertex, firstInstance);
			public void DrawIndexed(uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance) => Wgpu.RenderPassEncoderDrawIndexed(this, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
			public void DrawIndexedIndirect(Buffer indirectBuffer, uint64 indirectOffset) => Wgpu.RenderPassEncoderDrawIndexedIndirect(this, indirectBuffer, indirectOffset);
			public void DrawIndirect(Buffer indirectBuffer, uint64 indirectOffset) => Wgpu.RenderPassEncoderDrawIndirect(this, indirectBuffer, indirectOffset);
			public void End() => Wgpu.RenderPassEncoderEnd(this);
			public void EndOcclusionQuery() => Wgpu.RenderPassEncoderEndOcclusionQuery(this);
			public void EndPipelineStatisticsQuery() => Wgpu.RenderPassEncoderEndPipelineStatisticsQuery(this);
			public void ExecuteBundles(uint32 bundlesCount, RenderBundle* bundles) => Wgpu.RenderPassEncoderExecuteBundles(this, bundlesCount, bundles);
			public void InsertDebugMarker(WGPUStringView markerLabel) => Wgpu.RenderPassEncoderInsertDebugMarker(this, markerLabel);
			public void PopDebugGroup() => Wgpu.RenderPassEncoderPopDebugGroup(this);
			public void PushDebugGroup(WGPUStringView groupLabel) => Wgpu.RenderPassEncoderPushDebugGroup(this, groupLabel);
			public void SetBindGroup(uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets) => Wgpu.RenderPassEncoderSetBindGroup(this, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
			public void SetBlendConstant(Color* color) => Wgpu.RenderPassEncoderSetBlendConstant(this, color);
			public void SetIndexBuffer(Buffer buffer, IndexFormat format, uint64 offset, uint64 size) => Wgpu.RenderPassEncoderSetIndexBuffer(this, buffer, format, offset, size);
			public void SetPipeline(RenderPipeline pipeline) => Wgpu.RenderPassEncoderSetPipeline(this, pipeline);
			public void SetScissorRect(uint32 x, uint32 y, uint32 width, uint32 height) => Wgpu.RenderPassEncoderSetScissorRect(this, x, y, width, height);
			public void SetStencilReference(uint32 reference) => Wgpu.RenderPassEncoderSetStencilReference(this, reference);
			public void SetVertexBuffer(uint32 slot, Buffer buffer, uint64 offset, uint64 size) => Wgpu.RenderPassEncoderSetVertexBuffer(this, slot, buffer, offset, size);
			public void SetViewport(float x, float y, float width, float height, float minDepth, float maxDepth) => Wgpu.RenderPassEncoderSetViewport(this, x, y, width, height, minDepth, maxDepth);
			public void SetPushConstants(ShaderStage stages, uint32 offset, uint32 sizeBytes, void* data) => Wgpu.RenderPassEncoderSetPushConstants(this, stages, offset, sizeBytes, data);
		}

		[CRepr]
		public struct RenderPipeline : this(void* Handle) {
			public static Self Null => .(null);

			public BindGroupLayout GetBindGroupLayout(uint32 groupIndex) => Wgpu.RenderPipelineGetBindGroupLayout(this, groupIndex);
			public void SetLabel(WGPUStringView label) => Wgpu.RenderPipelineSetLabel(this, label);
			public void Release() => Wgpu.wgpuRenderPipelineRelease(this);
		}

		[CRepr]
		public struct Sampler : this(void* Handle) {
			public static Self Null => .(null);

			public void Release() => Wgpu.wgpuSamplerRelease(this);
		}

		[CRepr]
		public struct ShaderModule : this(void* Handle) {
			public static Self Null => .(null);

			public void GetCompilationInfo(CompilationInfoCallback callback, void* userdata) => Wgpu.ShaderModuleGetCompilationInfo(this, callback, userdata);
			public void SetLabel(WGPUStringView label) => Wgpu.ShaderModuleSetLabel(this, label);
			public void Release() => Wgpu.wgpuShaderModuleRelease(this);
		}

		[CRepr]
		public struct Surface : this(void* Handle) {
			public static Self Null => .(null);

			//public TextureFormat GetPreferredFormat(Adapter adapter) => Wgpu.SurfaceGetPreferredFormat(this, adapter);
		}

		/*[CRepr]
		public struct SwapChain : this(void* Handle) {
			public static Self Null => .(null);

			public TextureView GetCurrentTextureView() => Wgpu.SwapChainGetCurrentTextureView(this);
			public void Present() => Wgpu.SwapChainPresent(this);
		}*/

		[CRepr]
		public struct Texture : this(void* Handle) {
			public static Self Null => .(null);

			public TextureView CreateView(TextureViewDescriptor* descriptor) => Wgpu.TextureCreateView(this, descriptor);
			public void Destroy() => Wgpu.TextureDestroy(this);
			public void Release() => Wgpu.wgpuTextureRelease(this);
		}

		[CRepr]
		public struct TextureView : this(void* Handle) {
			public static Self Null => .(null);

			public void Release() => Wgpu.wgpuTextureViewRelease(this);
		}

		[CRepr]
		public struct ChainedStruct {
			public ChainedStruct* next;
			public SType sType;

			public this() {
				this = default;
			}

			public this(ChainedStruct* next, SType sType) {
				this.next = next;
				this.sType = sType;
			}
		}

		[CRepr]
		public struct ChainedStructOut {
			public ChainedStructOut* next;
			public SType sType;

			public this() {
				this = default;
			}

			public this(ChainedStructOut* next, SType sType) {
				this.next = next;
				this.sType = sType;
			}
		}

		[CRepr]
		public struct BufferMapCallbackInfo {
		    ChainedStruct* nextInChain;
		    CallbackMode mode;
		    BufferMapCallback callback;
		    void* userdata1;
		    void* userdata2;
		}

		[CRepr]
		public struct CompilationInfoCallbackInfo {
		    ChainedStruct* nextInChain;
		    CallbackMode mode;
		    CompilationInfoCallback callback;
		    void* userdata1;
		    void* userdata2;
		}

		[CRepr]
		public struct CreateComputePipelineAsyncCallbackInfo {
		    ChainedStruct* nextInChain;
		    CallbackMode mode;
		    CreateComputePipelineAsyncCallback callback;
		    void* userdata1;
		    void* userdata2;
		}

		[CRepr]
		public struct CreateRenderPipelineAsyncCallbackInfo {
		    ChainedStruct* nextInChain;
		    CallbackMode mode;
		    CreateRenderPipelineAsyncCallback callback;
		    void* userdata1;
		    void* userdata2;
		}

		[CRepr]
		public struct DeviceLostCallbackInfo {
		    ChainedStruct* nextInChain;
		    CallbackMode mode;
		    DeviceLostCallback callback;
		    void* userdata1;
		    void* userdata2;
		}

		[CRepr]
		public struct PopErrorScopeCallbackInfo {
		    ChainedStruct* nextInChain;
		    CallbackMode mode;
		    PopErrorScopeCallback callback;
		    void* userdata1;
		    void* userdata2;
		}

		[CRepr]
		public struct QueueWorkDoneCallbackInfo {
		    ChainedStruct* nextInChain;
		    CallbackMode mode;
		    QueueWorkDoneCallback callback;
		    void* userdata1;
		    void* userdata2;
		}

		[CRepr]
		public struct RequestAdapterCallbackInfo {
		    ChainedStruct* nextInChain;
		    CallbackMode mode;
		    RequestAdapterCallback callback;
		    void* userdata1;
		    void* userdata2;
		}

		[CRepr]
		public struct RequestDeviceCallbackInfo {
		    ChainedStruct* nextInChain;
		    CallbackMode mode;
		    RequestDeviceCallback callback;
		    void* userdata1;
		    void* userdata2;
		}

		[CRepr]
		public struct UncapturedErrorCallbackInfo {
		    ChainedStruct* nextInChain;
		    UncapturedErrorCallback callback;
		    void* userdata1;
		    void* userdata2;
		}

		[CRepr]
		public struct AdapterInfo {
			public ChainedStructOut* nextInChain;
			public WGPUStringView vendor;
			public WGPUStringView architecture;
			public WGPUStringView device;
			public WGPUStringView description;
			public BackendType backendType;
			public AdapterType adapterType;
			public uint32 vendorID;
			public uint32 deviceID;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct BindGroupEntry {
			public ChainedStruct* nextInChain;
			public uint32 binding;
			public Buffer buffer;
			public uint64 offset;
			public uint64 size;
			public Sampler sampler;
			public TextureView textureView;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, uint32 binding, Buffer buffer, uint64 offset, uint64 size, Sampler sampler, TextureView textureView) {
				this.nextInChain = nextInChain;
				this.binding = binding;
				this.buffer = buffer;
				this.offset = offset;
				this.size = size;
				this.sampler = sampler;
				this.textureView = textureView;
			}
		}

		[CRepr]
		public struct BlendComponent {
			public BlendOperation operation;
			public BlendFactor srcFactor;
			public BlendFactor dstFactor;

			public this() {
				this = default;
			}

			public this(BlendOperation operation, BlendFactor srcFactor, BlendFactor dstFactor) {
				this.operation = operation;
				this.srcFactor = srcFactor;
				this.dstFactor = dstFactor;
			}
		}

		[CRepr]
		public struct BufferBindingLayout {
			public ChainedStruct* nextInChain;
			public BufferBindingType type;
			public c_bool hasDynamicOffset;
			public uint64 minBindingSize;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, BufferBindingType type, c_bool hasDynamicOffset, uint64 minBindingSize) {
				this.nextInChain = nextInChain;
				this.type = type;
				this.hasDynamicOffset = hasDynamicOffset;
				this.minBindingSize = minBindingSize;
			}
		}

		[CRepr]
		public struct BufferDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public BufferUsage usage;
			public uint64 size;
			public c_bool mappedAtCreation;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, WGPUStringView label, BufferUsage usage, uint64 size, c_bool mappedAtCreation) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.usage = usage;
				this.size = size;
				this.mappedAtCreation = mappedAtCreation;
			}
		}

		[CRepr]
		public struct Color {
			public double r;
			public double g;
			public double b;
			public double a;

			public this() {
				this = default;
			}

			public this(double r, double g, double b, double a) {
				this.r = r;
				this.g = g;
				this.b = b;
				this.a = a;
			}
		}

		[CRepr]
		public struct CommandBufferDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, WGPUStringView label) {
				this.nextInChain = nextInChain;
				this.label = label;
			}
		}

		[CRepr]
		public struct CommandEncoderDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, WGPUStringView label) {
				this.nextInChain = nextInChain;
				this.label = label;
			}
		}

		[CRepr]
		public struct CompilationMessage {
			public ChainedStruct* nextInChain;
			public WGPUStringView message;
			public CompilationMessageType type;
			public uint64 lineNum;
			public uint64 linePos;
			public uint64 offset;
			public uint64 length;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, WGPUStringView message, CompilationMessageType type, uint64 lineNum, uint64 linePos, uint64 offset, uint64 length) {
				this.nextInChain = nextInChain;
				this.message = message;
				this.type = type;
				this.lineNum = lineNum;
				this.linePos = linePos;
				this.offset = offset;
				this.length = length;
			}
		}

		[CRepr]
		public struct ComputePassTimestampWrites {
			public QuerySet querySet;
			public uint32 beginningOfPassWriteIndex;
			public uint32 endOfPassWriteIndex;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct ConstantEntry {
			public ChainedStruct* nextInChain;
			public WGPUStringView key;
			public double value;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, WGPUStringView key, double value) {
				this.nextInChain = nextInChain;
				this.key = key;
				this.value = value;
			}
		}

		[CRepr]
		public struct Extent3D {
			public uint32 width;
			public uint32 height;
			public uint32 depthOrArrayLayers;

			public this() {
				this = default;
			}

			public this(uint32 width, uint32 height, uint32 depthOrArrayLayers) {
				this.width = width;
				this.height = height;
				this.depthOrArrayLayers = depthOrArrayLayers;
			}
		}

		[CRepr]
		public struct Future {
		    uint64 id;
		}

		[CRepr]
		public struct InstanceCapabilities {
			public ChainedStruct* nextInChain;
			public bool timedWaitAnyEnable;
			public c_size timedWaitAnyMaxCount;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct Limits {
			public uint32 maxTextureDimension1D;
			public uint32 maxTextureDimension2D;
			public uint32 maxTextureDimension3D;
			public uint32 maxTextureArrayLayers;
			public uint32 maxBindGroups;
			public uint32 maxBindGroupsPlusVertexBuffers;
			public uint32 maxBindingsPerBindGroup;
			public uint32 maxDynamicUniformBuffersPerPipelineLayout;
			public uint32 maxDynamicStorageBuffersPerPipelineLayout;
			public uint32 maxSampledTexturesPerShaderStage;
			public uint32 maxSamplersPerShaderStage;
			public uint32 maxStorageBuffersPerShaderStage;
			public uint32 maxStorageTexturesPerShaderStage;
			public uint32 maxUniformBuffersPerShaderStage;
			public uint64 maxUniformBufferBindingSize;
			public uint64 maxStorageBufferBindingSize;
			public uint32 minUniformBufferOffsetAlignment;
			public uint32 minStorageBufferOffsetAlignment;
			public uint32 maxVertexBuffers;
			public uint32 maxBufferSize;
			public uint32 maxVertexAttributes;
			public uint32 maxVertexBufferArrayStride;
			public uint32 maxInterStageShaderVariables;
			public uint32 maxColorAttachments;
			public uint32 maxColorAttachmentBytesPerSample;
			public uint32 maxInterStageShaderComponents;
			public uint32 maxComputeWorkgroupStorageSize;
			public uint32 maxComputeInvocationsPerWorkgroup;
			public uint32 maxComputeWorkgroupSizeX;
			public uint32 maxComputeWorkgroupSizeY;
			public uint32 maxComputeWorkgroupSizeZ;
			public uint32 maxComputeWorkgroupsPerDimension;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct MultisampleState {
			public ChainedStruct* nextInChain;
			public uint32 count;
			public uint32 mask;
			public c_bool alphaToCoverageEnabled;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, uint32 count, uint32 mask, c_bool alphaToCoverageEnabled) {
				this.nextInChain = nextInChain;
				this.count = count;
				this.mask = mask;
				this.alphaToCoverageEnabled = alphaToCoverageEnabled;
			}
		}

		[CRepr]
		public struct Origin3D {
			public uint32 x;
			public uint32 y;
			public uint32 z;

			public this() {
				this = default;
			}

			public this(uint32 x, uint32 y, uint32 z) {
				this.x = x;
				this.y = y;
				this.z = z;
			}
		}

		[CRepr]
		public struct PipelineLayoutDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public c_size bindGroupLayoutCount;
			public BindGroupLayout* bindGroupLayouts;

			public this() {
				this = default;
			}
		}

		/*[CRepr]
		public struct PrimitiveDepthClipControl {
			public ChainedStruct chain;
			public c_bool unclippedDepth;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, c_bool unclippedDepth) {
				this.chain = chain;
				this.unclippedDepth = unclippedDepth;
			}
		}*/

		[CRepr]
		public struct PrimitiveState {
			public ChainedStruct* nextInChain;
			public PrimitiveTopology topology;
			public IndexFormat stripIndexFormat;
			public FrontFace frontFace;
			public CullMode cullMode;
			public c_bool unclippedDepth;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct QuerySetDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public QueryType type;
			public uint32 count;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct QueueDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, WGPUStringView label) {
				this.nextInChain = nextInChain;
				this.label = label;
			}
		}

		[CRepr]
		public struct RenderBundleDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, WGPUStringView label) {
				this.nextInChain = nextInChain;
				this.label = label;
			}
		}

		[CRepr]
		public struct RenderBundleEncoderDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public c_size colorFormatsCount;
			public TextureFormat* colorFormats;
			public TextureFormat depthStencilFormat;
			public uint32 sampleCount;
			public c_bool depthReadOnly;
			public c_bool stencilReadOnly;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct RenderPassDepthStencilAttachment {
			public TextureView view;
			public LoadOp depthLoadOp;
			public StoreOp depthStoreOp;
			public float depthClearValue;
			public c_bool depthReadOnly;
			public LoadOp stencilLoadOp;
			public StoreOp stencilStoreOp;
			public uint32 stencilClearValue;
			public c_bool stencilReadOnly;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct RenderPassTimestampWrite {
			public QuerySet querySet;
			public uint32 beginningOfPassWriteIndex;
			public uint32 endOfPassWriteIndex;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct RequestAdapterOptions {
			public ChainedStruct* nextInChain;
			public FeatureLevel featureLevel;
			public PowerPreference powerPreference;
			public c_bool forceFallbackAdapter;
			public BackendType backendType;
			public Surface compatibleSurface;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct SamplerBindingLayout {
			public ChainedStruct* nextInChain;
			public SamplerBindingType type;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, SamplerBindingType type) {
				this.nextInChain = nextInChain;
				this.type = type;
			}
		}

		[CRepr]
		public struct SamplerDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public AddressMode addressModeU;
			public AddressMode addressModeV;
			public AddressMode addressModeW;
			public FilterMode magFilter;
			public FilterMode minFilter;
			public MipmapFilterMode mipmapFilter;
			public float lodMinClamp;
			public float lodMaxClamp;
			public CompareFunction compare;
			public uint16 maxAnisotropy;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct ShaderModuleDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct ShaderSourceSPIRV {
			public ChainedStruct chain;
			public uint32 codeSize;
			public uint32* code;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, uint32 codeSize, uint32* code) {
				this.chain = chain;
				this.codeSize = codeSize;
				this.code = code;
			}
		}

		[CRepr]
		public struct ShaderSourceWGSL {
			public ChainedStruct chain;
			public WGPUStringView code;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct StencilFaceState {
			public CompareFunction compare;
			public StencilOperation failOp;
			public StencilOperation depthFailOp;
			public StencilOperation passOp;

			public this() {
				this = default;
			}

			public this(CompareFunction compare, StencilOperation failOp, StencilOperation depthFailOp, StencilOperation passOp) {
				this.compare = compare;
				this.failOp = failOp;
				this.depthFailOp = depthFailOp;
				this.passOp = passOp;
			}
		}

		[CRepr]
		public struct StorageTextureBindingLayout {
			public ChainedStruct* nextInChain;
			public StorageTextureAccess access;
			public TextureFormat format;
			public TextureViewDimension viewDimension;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, StorageTextureAccess access, TextureFormat format, TextureViewDimension viewDimension) {
				this.nextInChain = nextInChain;
				this.access = access;
				this.format = format;
				this.viewDimension = viewDimension;
			}
		}

		[CRepr]
		public struct SupportedFeatures {
			public c_size featureCount;
			public FeatureName* features;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct SupportedWGSLLanguageFeatures {
			public c_size featureCount;
			public WGSLLanguageFeatureName * features;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct SurfaceCapabilities {
			public ChainedStruct* nextInChain;
			public TextureUsage usages;
			public c_size formatCount;
			public TextureFormat* formats;
			public c_size presentModeCount;
			public PresentMode* presentModes;
			public c_size alphaModeCount;
			public CompositeAlphaMode* alphaModes;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct SurfaceConfiguration {
			public ChainedStruct* nextInChain;
			public Device device;
			public TextureFormat format;
			public TextureUsage usage;
			public uint32 width;
			public uint32 height;
			public c_size viewFormatCount;
			public TextureFormat* viewFormats;
			public CompositeAlphaMode alphaMode;
			public PresentMode presentMode;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct SurfaceDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, WGPUStringView label) {
				this.nextInChain = nextInChain;
				this.label = label;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromAndroidNativeWindow {
			public ChainedStruct chain;
			public void* window;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* window) {
				this.chain = chain;
				this.window = window;
			}
		}

		/*[CRepr]
		public struct SurfaceDescriptorFromCanvasHTMLSelector {
			public ChainedStruct chain;
			public c_char* selector;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, c_char* selector) {
				this.chain = chain;
				this.selector = selector;
			}
		}*/

		[CRepr]
		public struct SurfaceDescriptorFromMetalLayer {
			public ChainedStruct chain;
			public void* layer;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* layer) {
				this.chain = chain;
				this.layer = layer;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromWaylandSurface {
			public ChainedStruct chain;
			public void* display;
			public void* surface;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* display, void* surface) {
				this.chain = chain;
				this.display = display;
				this.surface = surface;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromWindowsHWND {
			public ChainedStruct chain;
			public void* hinstance;
			public void* hwnd;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* hinstance, void* hwnd) {
				this.chain = chain;
				this.hinstance = hinstance;
				this.hwnd = hwnd;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromXcbWindow {
			public ChainedStruct chain;
			public void* connection;
			public uint32 window;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* connection, uint32 window) {
				this.chain = chain;
				this.connection = connection;
				this.window = window;
			}
		}

		[CRepr]
		public struct SurfaceDescriptorFromXlibWindow {
			public ChainedStruct chain;
			public void* display;
			public uint64 window;

			public this() {
				this = default;
			}

			public this(ChainedStruct chain, void* display, uint64 window) {
				this.chain = chain;
				this.display = display;
				this.window = window;
			}
		}

		[CRepr]
		public struct SurfaceTexture {
			public ChainedStructOut* nextInChain;
			public Texture texture;
			public WGPUSurfaceGetCurrentTextureStatus status;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct TexelCopyBufferLayout {
			public uint64 offset;
			public uint32 bytesPerRow;
			public uint32 rowsPerImage;

			public this() {
				this = default;
			}
		}

		/*[CRepr]
		public struct SwapChainDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public TextureUsage usage;
			public TextureFormat format;
			public uint32 width;
			public uint32 height;
			public PresentMode presentMode;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, TextureUsage usage, TextureFormat format, uint32 width, uint32 height, PresentMode presentMode) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.usage = usage;
				this.format = format;
				this.width = width;
				this.height = height;
				this.presentMode = presentMode;
			}
		}*/

		[CRepr]
		public struct TextureBindingLayout {
			public ChainedStruct* nextInChain;
			public TextureSampleType sampleType;
			public TextureViewDimension viewDimension;
			public c_bool multisampled;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, TextureSampleType sampleType, TextureViewDimension viewDimension, c_bool multisampled) {
				this.nextInChain = nextInChain;
				this.sampleType = sampleType;
				this.viewDimension = viewDimension;
				this.multisampled = multisampled;
			}
		}

		/*[CRepr]
		public struct TextureDataLayout {
			public ChainedStruct* nextInChain;
			public uint64 offset;
			public uint32 bytesPerRow;
			public uint32 rowsPerImage;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, uint64 offset, uint32 bytesPerRow, uint32 rowsPerImage) {
				this.nextInChain = nextInChain;
				this.offset = offset;
				this.bytesPerRow = bytesPerRow;
				this.rowsPerImage = rowsPerImage;
			}
		}*/

		[CRepr]
		public struct TextureViewDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public TextureFormat format;
			public TextureViewDimension dimension;
			public uint32 baseMipLevel;
			public uint32 mipLevelCount;
			public uint32 baseArrayLayer;
			public uint32 arrayLayerCount;
			public TextureAspect aspect;
			public TextureUsage usage;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct VertexAttribute {
			public VertexFormat format;
			public uint64 offset;
			public uint32 shaderLocation;

			public this() {
				this = default;
			}

			public this(VertexFormat format, uint64 offset, uint32 shaderLocation) {
				this.format = format;
				this.offset = offset;
				this.shaderLocation = shaderLocation;
			}
		}

		[CRepr]
		public struct BindGroupDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public BindGroupLayout layout;
			public c_size entryCount;
			public BindGroupEntry* entries;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct BindGroupLayoutEntry {
			public ChainedStruct* nextInChain;
			public uint32 binding;
			public ShaderStage visibility;
			public BufferBindingLayout buffer;
			public SamplerBindingLayout sampler;
			public TextureBindingLayout texture;
			public StorageTextureBindingLayout storageTexture;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, uint32 binding, ShaderStage visibility, BufferBindingLayout buffer, SamplerBindingLayout sampler, TextureBindingLayout texture, StorageTextureBindingLayout storageTexture) {
				this.nextInChain = nextInChain;
				this.binding = binding;
				this.visibility = visibility;
				this.buffer = buffer;
				this.sampler = sampler;
				this.texture = texture;
				this.storageTexture = storageTexture;
			}
		}

		[CRepr]
		public struct BlendState {
			public BlendComponent color;
			public BlendComponent alpha;

			public this() {
				this = default;
			}

			public this(BlendComponent color, BlendComponent alpha) {
				this.color = color;
				this.alpha = alpha;
			}
		}

		[CRepr]
		public struct CompilationInfo {
			public ChainedStruct* nextInChain;
			public c_size messageCount;
			public CompilationMessage* messages;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, uint32 messageCount, CompilationMessage* messages) {
				this.nextInChain = nextInChain;
				this.messageCount = messageCount;
				this.messages = messages;
			}
		}

		[CRepr]
		public struct ComputePassDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public ComputePassTimestampWrites* timestampWrites;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct DepthStencilState {
			public ChainedStruct* nextInChain;
			public TextureFormat format;
			public c_bool depthWriteEnabled;
			public CompareFunction depthCompare;
			public StencilFaceState stencilFront;
			public StencilFaceState stencilBack;
			public uint32 stencilReadMask;
			public uint32 stencilWriteMask;
			public int32 depthBias;
			public float depthBiasSlopeScale;
			public float depthBiasClamp;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, TextureFormat format, c_bool depthWriteEnabled, CompareFunction depthCompare, StencilFaceState stencilFront, StencilFaceState stencilBack, uint32 stencilReadMask, uint32 stencilWriteMask, int32 depthBias, float depthBiasSlopeScale, float depthBiasClamp) {
				this.nextInChain = nextInChain;
				this.format = format;
				this.depthWriteEnabled = depthWriteEnabled;
				this.depthCompare = depthCompare;
				this.stencilFront = stencilFront;
				this.stencilBack = stencilBack;
				this.stencilReadMask = stencilReadMask;
				this.stencilWriteMask = stencilWriteMask;
				this.depthBias = depthBias;
				this.depthBiasSlopeScale = depthBiasSlopeScale;
				this.depthBiasClamp = depthBiasClamp;
			}
		}

		[CRepr]
		public struct DeviceDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public c_size requiredFeatureCount;
			public FeatureName* requiredFeatures;
			public Limits* requiredLimits;
			public QueueDescriptor defaultQueue;
			public DeviceLostCallbackInfo deviceLostCallbackInfo;
			public UncapturedErrorCallbackInfo uncapturedErrorCallbackInfo;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct FutureWaitInfo {
			public Future future;
			public c_bool completed;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct InstanceDescriptor {
		    ChainedStruct* nextInChain;
		    InstanceCapabilities features;
		}


		/*[CRepr]
		public struct ImageCopyBuffer {
			public ChainedStruct* nextInChain;
			public TextureDataLayout layout;
			public Buffer buffer;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, TextureDataLayout layout, Buffer buffer) {
				this.nextInChain = nextInChain;
				this.layout = layout;
				this.buffer = buffer;
			}
		}

		[CRepr]
		public struct ImageCopyTexture {
			public ChainedStruct* nextInChain;
			public Texture texture;
			public uint32 mipLevel;
			public Origin3D origin;
			public TextureAspect aspect;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, Texture texture, uint32 mipLevel, Origin3D origin, TextureAspect aspect) {
				this.nextInChain = nextInChain;
				this.texture = texture;
				this.mipLevel = mipLevel;
				this.origin = origin;
				this.aspect = aspect;
			}
		}*/

		[CRepr]
		public struct ProgrammableStageDescriptor {
			public ChainedStruct* nextInChain;
			public ShaderModule module;
			public WGPUStringView entryPoint;
			public c_size constantCount;
			public ConstantEntry* constants;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct RenderPassColorAttachment {
			public ChainedStruct* nextInChain;
			public TextureView view;
			public uint32 depthSlice;
			public TextureView resolveTarget;
			public LoadOp loadOp;
			public StoreOp storeOp;
			public Color clearValue;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct TexelCopyBufferInfo {
			public TexelCopyBufferLayout layout;
			public Buffer buffer;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct TexelCopyTextureInfo {
			public Texture texture;
			public uint32 mipLevel;
			public Origin3D origin;
			public TextureAspect aspect;

			public this() {
				this = default;
			}
		}

		/*[CRepr]
		public struct RequiredLimits {
			public ChainedStruct* nextInChain;
			public Limits limits;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, Limits limits) {
				this.nextInChain = nextInChain;
				this.limits = limits;
			}
		}*/

		/*[CRepr]
		public struct ShaderModuleDescriptor {
			public ChainedStruct* nextInChain;
			public c_char* label;
			public uint32 hintCount;
			public ShaderModuleCompilationHint* hints;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, c_char* label, uint32 hintCount, ShaderModuleCompilationHint* hints) {
				this.nextInChain = nextInChain;
				this.label = label;
				this.hintCount = hintCount;
				this.hints = hints;
			}
		}*/

		/*[CRepr]
		public struct SupportedLimits {
			public ChainedStructOut* nextInChain;
			public Limits limits;

			public this() {
				this = default;
			}

			public this(ChainedStructOut* nextInChain, Limits limits) {
				this.nextInChain = nextInChain;
				this.limits = limits;
			}
		}*/

		[CRepr]
		public struct TextureDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public TextureUsage usage;
			public TextureDimension dimension;
			public Extent3D size;
			public TextureFormat format;
			public uint32 mipLevelCount;
			public uint32 sampleCount;
			public c_size viewFormatCount;
			public TextureFormat* viewFormats;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct VertexBufferLayout {
			public VertexStepMode stepMode;
			public uint64 arrayStride;
			public c_size attributeCount;
			public VertexAttribute* attributes;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct BindGroupLayoutDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public c_size entryCount;
			public BindGroupLayoutEntry* entries;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct ColorTargetState {
			public ChainedStruct* nextInChain;
			public TextureFormat format;
			public BlendState* blend;
			public ColorWriteMask writeMask;

			public this() {
				this = default;
			}

			public this(ChainedStruct* nextInChain, TextureFormat format, BlendState* blend, ColorWriteMask writeMask) {
				this.nextInChain = nextInChain;
				this.format = format;
				this.blend = blend;
				this.writeMask = writeMask;
			}
		}

		[CRepr]
		public struct ComputePipelineDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public PipelineLayout layout;
			public ProgrammableStageDescriptor compute;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct RenderPassDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public c_size colorAttachmentCount;
			public RenderPassColorAttachment* colorAttachments;
			public RenderPassDepthStencilAttachment* depthStencilAttachment;
			public QuerySet occlusionQuerySet;
			public RenderPassTimestampWrite* timestampWrites;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct VertexState {
			public ChainedStruct* nextInChain;
			public ShaderModule module;
			public WGPUStringView entryPoint;
			public c_size constantCount;
			public ConstantEntry* constants;
			public c_size bufferCount;
			public VertexBufferLayout* buffers;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct FragmentState {
			public ChainedStruct* nextInChain;
			public ShaderModule module;
			public WGPUStringView entryPoint;
			public c_size constantCount;
			public ConstantEntry* constants;
			public c_size targetCount;
			public ColorTargetState* targets;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct RenderPipelineDescriptor {
			public ChainedStruct* nextInChain;
			public WGPUStringView label;
			public PipelineLayout layout;
			public VertexState vertex;
			public PrimitiveState primitive;
			public DepthStencilState* depthStencil;
			public MultisampleState multisample;
			public FragmentState* fragment;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct InstanceExtras {
			public ChainedStruct* chain;
			public InstanceBackend backends;
			public InstanceFlag flags;
			public Dx12Compiler dx12ShaderCompiler;
			public Gles3MinorVersion gles3MinorVersion;
			public WGPUStringView dxilPath;
			public WGPUStringView dxcPath;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct DeviceExtras {
			public ChainedStruct* chain;
			public WGPUStringView tracePath;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct NativeLimits {
			public ChainedStructOut* chain;
			public uint32 maxPushConstantSize;
			public uint32 maxNonSamplerBindings;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct PushConstantRange {
			public ShaderStage* stages;
			public uint32 start;
			public uint32 end;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct PipelineLayoutExtras {
			public ChainedStruct* chain;
			public c_size maxPushConstantSize;
			public PushConstantRange* pushConstantRanges;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct ShaderDefine {
			public WGPUStringView name;
			public WGPUStringView value;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct ShaderModuleGLSLDescriptor {
			public ChainedStruct* chain;
			public ShaderStage stage;
			public WGPUStringView code;
			public uint32 defineCount;
			ShaderDefine* defines;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct ShaderModuleDescriptorSpirV {
			public WGPUStringView label;
			public uint32 sourceSize;
			public uint32* source;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct RegistryReport {
			public c_size numAllocated;
			public c_size numKeptFromUser;
			public c_size numReleasedFromUser;
			public c_size elementSize;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct HubReport {
			public RegistryReport adapters;
			public RegistryReport devices;
			public RegistryReport queues;
			public RegistryReport pipelineLayouts;
			public RegistryReport shaderModules;
			public RegistryReport bindGroupLayouts;
			public RegistryReport bindGroups;
			public RegistryReport commandBuffers;
			public RegistryReport renderBundles;
			public RegistryReport renderPipelines;
			public RegistryReport computePipelines;
			public RegistryReport pipelineCaches;
			public RegistryReport querySets;
			public RegistryReport buffers;
			public RegistryReport textures;
			public RegistryReport textureViews;
			public RegistryReport samplers;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct GlobalReport {
			public RegistryReport surfaces;
			public HubReport hub;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct InstanceEnumerateAdapterOptions {
			public ChainedStruct* nextInChain;
			public HubReport hub;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct BindGroupEntryExtras {
			public ChainedStruct* chain;
			public Buffer* buffers;
			public c_size bufferCount;
			public Sampler* samplers;
			public c_size samplerCount;
			public TextureView* textureViews;
			public c_size textureViewCount;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct BindGroupLayoutEntryExtras {
			public ChainedStruct* chain;
			public uint32 count;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct QuerySetDescriptorExtras {
			public ChainedStruct* chain;
			public PipelineStatisicName* pipelineStatistics;
			public c_size pipelineStatisticsCount;

			public this() {
				this = default;
			}
		}

		[CRepr]
		public struct SurfaceConfigurationExtras {
			public ChainedStruct* chain;
			public uint32 desiredMaximumFrameLatency;

			public this() {
				this = default;
			}
		}

		//webgpu.h callback conversion
		public function void Proc();
		public function void BufferMapCallback(MapAsyncStatus status, WGPUStringView message, void* userdata1, void* userdata2);
		public function void CompilationInfoCallback(CompilationInfoRequestStatus status, CompilationInfo* compilationInfo, void* userdata1, void* userdata2);
		public function void CreateComputePipelineAsyncCallback(CreatePipelineAsyncStatus status, ComputePipeline pipeline, WGPUStringView message, void* userdata1, void* userdata2);
		public function void CreateRenderPipelineAsyncCallback(CreatePipelineAsyncStatus status, RenderPipeline pipeline, WGPUStringView message, void* userdata1, void* userdata2);
		public function void DeviceLostCallback(Device* device, DeviceLostReason reason, WGPUStringView message, void* userdata1, void* userdata2);
		public function void PopErrorScopeCallback(PopErrorScopeStatus status, ErrorType type, WGPUStringView message, void* userdata1, void* userdata2);
		public function void QueueWorkDoneCallback(QueueWorkDoneStatus status, void* userdata1, void* userdata2);
		public function void RequestAdapterCallback(RequestAdapterStatus status, Adapter adapter, WGPUStringView message, void* userdata1, void* userdata2);
		public function void RequestDeviceCallback(RequestDeviceStatus status, Device device, WGPUStringView message, void* userdata1, void* userdata2);
		public function void UncapturedErrorCallback(Device* device, ErrorType type, WGPUStringView message, void* userdata1, void* userdata2);

		public function Instance ProcCreateInstance(InstanceDescriptor* descriptor);
		public function Proc ProcGetProcAddress(WGPUStringView procName);
		public function c_size ProcAdapterEnumerateFeatures(Adapter adapter, FeatureName* features);
		public function c_bool ProcAdapterGetLimits(Adapter adapter, Limits* limits);
		public function void ProcAdapterGetInfo(Adapter adapter, AdapterInfo* Info);
		public function c_bool ProcAdapterHasFeature(Adapter adapter, FeatureName feature);
		public function void ProcAdapterRequestDevice(Adapter adapter, DeviceDescriptor* descriptor, RequestDeviceCallback callback, void* userdata);
		public function void ProcBufferDestroy(Buffer buffer);
		public function void* ProcBufferGetConstMappedRange(Buffer buffer, c_size offset, c_size size);
		public function void* ProcBufferGetMappedRange(Buffer buffer, c_size offset, c_size size);
		public function void ProcBufferMapAsync(Buffer buffer, MapMode mode, c_size offset, c_size size, BufferMapCallback callback, void* userdata);
		public function void ProcBufferUnmap(Buffer buffer);
		public function ComputePassEncoder ProcCommandEncoderBeginComputePass(CommandEncoder commandEncoder, ComputePassDescriptor* descriptor);
		public function RenderPassEncoder ProcCommandEncoderBeginRenderPass(CommandEncoder commandEncoder, RenderPassDescriptor* descriptor);
		public function void ProcCommandEncoderClearBuffer(CommandEncoder commandEncoder, Buffer buffer, uint64 offset, uint64 size);
		public function void ProcCommandEncoderCopyBufferToBuffer(CommandEncoder commandEncoder, Buffer source, uint64 sourceOffset, Buffer destination, uint64 destinationOffset, uint64 size);
		public function void ProcCommandEncoderCopyBufferToTexture(CommandEncoder commandEncoder, ImageCopyBuffer* source, ImageCopyTexture* destination, Extent3D* copySize);
		public function void ProcCommandEncoderCopyTextureToBuffer(CommandEncoder commandEncoder, ImageCopyTexture* source, ImageCopyBuffer* destination, Extent3D* copySize);
		public function void ProcCommandEncoderCopyTextureToTexture(CommandEncoder commandEncoder, ImageCopyTexture* source, ImageCopyTexture* destination, Extent3D* copySize);
		public function CommandBuffer ProcCommandEncoderFinish(CommandEncoder commandEncoder, CommandBufferDescriptor* descriptor);
		public function void ProcCommandEncoderInsertDebugMarker(CommandEncoder commandEncoder, WGPUStringView markerLabel);
		public function void ProcCommandEncoderPopDebugGroup(CommandEncoder commandEncoder);
		public function void ProcCommandEncoderPushDebugGroup(CommandEncoder commandEncoder, WGPUStringView groupLabel);
		public function void ProcCommandEncoderResolveQuerySet(CommandEncoder commandEncoder, QuerySet querySet, uint32 firstQuery, uint32 queryCount, Buffer destination, uint64 destinationOffset);
		public function void ProcCommandEncoderWriteTimestamp(CommandEncoder commandEncoder, QuerySet querySet, uint32 queryIndex);
		public function void ProcComputePassEncoderBeginPipelineStatisticsQuery(ComputePassEncoder computePassEncoder, QuerySet querySet, uint32 queryIndex);
		public function void ProcComputePassEncoderDispatchWorkgroups(ComputePassEncoder computePassEncoder, uint32 workgroupCountX, uint32 workgroupCountY, uint32 workgroupCountZ);
		public function void ProcComputePassEncoderDispatchWorkgroupsIndirect(ComputePassEncoder computePassEncoder, Buffer indirectBuffer, uint64 indirectOffset);
		public function void ProcComputePassEncoderEnd(ComputePassEncoder computePassEncoder);
		public function void ProcComputePassEncoderEndPipelineStatisticsQuery(ComputePassEncoder computePassEncoder);
		public function void ProcComputePassEncoderInsertDebugMarker(ComputePassEncoder computePassEncoder, WGPUStringView markerLabel);
		public function void ProcComputePassEncoderPopDebugGroup(ComputePassEncoder computePassEncoder);
		public function void ProcComputePassEncoderPushDebugGroup(ComputePassEncoder computePassEncoder, WGPUStringView groupLabel);
		public function void ProcComputePassEncoderSetBindGroup(ComputePassEncoder computePassEncoder, uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets);
		public function void ProcComputePassEncoderSetPipeline(ComputePassEncoder computePassEncoder, ComputePipeline pipeline);
		public function BindGroupLayout ProcComputePipelineGetBindGroupLayout(ComputePipeline computePipeline, uint32 groupIndex);
		public function void ProcComputePipelineSetLabel(ComputePipeline computePipeline, WGPUStringView label);
		public function BindGroup ProcDeviceCreateBindGroup(Device device, BindGroupDescriptor* descriptor);
		public function BindGroupLayout ProcDeviceCreateBindGroupLayout(Device device, BindGroupLayoutDescriptor* descriptor);
		public function Buffer ProcDeviceCreateBuffer(Device device, BufferDescriptor* descriptor);
		public function CommandEncoder ProcDeviceCreateCommandEncoder(Device device, CommandEncoderDescriptor* descriptor);
		public function ComputePipeline ProcDeviceCreateComputePipeline(Device device, ComputePipelineDescriptor* descriptor);
		public function void ProcDeviceCreateComputePipelineAsync(Device device, ComputePipelineDescriptor* descriptor, CreateComputePipelineAsyncCallback callback, void* userdata);
		public function PipelineLayout ProcDeviceCreatePipelineLayout(Device device, PipelineLayoutDescriptor* descriptor);
		public function QuerySet ProcDeviceCreateQuerySet(Device device, QuerySetDescriptor* descriptor);
		public function RenderBundleEncoder ProcDeviceCreateRenderBundleEncoder(Device device, RenderBundleEncoderDescriptor* descriptor);
		public function RenderPipeline ProcDeviceCreateRenderPipeline(Device device, RenderPipelineDescriptor* descriptor);
		public function void ProcDeviceCreateRenderPipelineAsync(Device device, RenderPipelineDescriptor* descriptor, CreateRenderPipelineAsyncCallback callback, void* userdata);
		public function Sampler ProcDeviceCreateSampler(Device device, SamplerDescriptor* descriptor);
		public function ShaderModule ProcDeviceCreateShaderModule(Device device, ShaderModuleDescriptor* descriptor);
		//public function SwapChain ProcDeviceCreateSwapChain(Device device, Surface surface, SwapChainDescriptor* descriptor);
		public function Texture ProcDeviceCreateTexture(Device device, TextureDescriptor* descriptor);
		public function void ProcDeviceDestroy(Device device);
		public function c_size ProcDeviceEnumerateFeatures(Device device, FeatureName* features);
		public function c_bool ProcDeviceGetLimits(Device device, Limits* limits);
		public function Queue ProcDeviceGetQueue(Device device);
		public function c_bool ProcDeviceHasFeature(Device device, FeatureName feature);
		public function c_bool ProcDevicePopErrorScope(Device device, ErrorCallback callback, void* userdata);
		public function void ProcDevicePushErrorScope(Device device, ErrorFilter filter);
		public function void ProcDeviceSetDeviceLostCallback(Device device, DeviceLostCallback callback, void* userdata);
		public function void ProcDeviceSetUncapturedErrorCallback(Device device, ErrorCallback callback, void* userdata);
		public function Surface ProcInstanceCreateSurface(Instance instance, SurfaceDescriptor* descriptor);
		public function void ProcInstanceProcessEvents(Instance instance);
		public function void ProcInstanceRequestAdapter(Instance instance, RequestAdapterOptions* options, RequestAdapterCallback callback, void* userdata);
		public function void ProcQuerySetDestroy(QuerySet querySet);
		public function void ProcQueueOnSubmittedWorkDone(Queue queue, QueueWorkDoneCallback callback, void* userdata);
		public function void ProcQueueSubmit(Queue queue, uint32 commandCount, CommandBuffer* commands);
		public function void ProcQueueWriteBuffer(Queue queue, Buffer buffer, uint64 bufferOffset, void* data, c_size size);
		public function void ProcQueueWriteTexture(Queue queue, ImageCopyTexture* destination, void* data, c_size dataSize, TextureDataLayout* dataLayout, Extent3D* writeSize);
		public function void ProcRenderBundleEncoderDraw(RenderBundleEncoder renderBundleEncoder, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance);
		public function void ProcRenderBundleEncoderDrawIndexed(RenderBundleEncoder renderBundleEncoder, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance);
		public function void ProcRenderBundleEncoderDrawIndexedIndirect(RenderBundleEncoder renderBundleEncoder, Buffer indirectBuffer, uint64 indirectOffset);
		public function void ProcRenderBundleEncoderDrawIndirect(RenderBundleEncoder renderBundleEncoder, Buffer indirectBuffer, uint64 indirectOffset);
		public function RenderBundle ProcRenderBundleEncoderFinish(RenderBundleEncoder renderBundleEncoder, RenderBundleDescriptor* descriptor);
		public function void ProcRenderBundleEncoderInsertDebugMarker(RenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel);
		public function void ProcRenderBundleEncoderPopDebugGroup(RenderBundleEncoder renderBundleEncoder);
		public function void ProcRenderBundleEncoderPushDebugGroup(RenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel);
		public function void ProcRenderBundleEncoderSetBindGroup(RenderBundleEncoder renderBundleEncoder, uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets);
		public function void ProcRenderBundleEncoderSetIndexBuffer(RenderBundleEncoder renderBundleEncoder, Buffer buffer, IndexFormat format, uint64 offset, uint64 size);
		public function void ProcRenderBundleEncoderSetPipeline(RenderBundleEncoder renderBundleEncoder, RenderPipeline pipeline);
		public function void ProcRenderBundleEncoderSetVertexBuffer(RenderBundleEncoder renderBundleEncoder, uint32 slot, Buffer buffer, uint64 offset, uint64 size);
		public function void ProcRenderPassEncoderBeginOcclusionQuery(RenderPassEncoder renderPassEncoder, uint32 queryIndex);
		public function void ProcRenderPassEncoderBeginPipelineStatisticsQuery(RenderPassEncoder renderPassEncoder, QuerySet querySet, uint32 queryIndex);
		public function void ProcRenderPassEncoderDraw(RenderPassEncoder renderPassEncoder, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance);
		public function void ProcRenderPassEncoderDrawIndexed(RenderPassEncoder renderPassEncoder, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance);
		public function void ProcRenderPassEncoderDrawIndexedIndirect(RenderPassEncoder renderPassEncoder, Buffer indirectBuffer, uint64 indirectOffset);
		public function void ProcRenderPassEncoderDrawIndirect(RenderPassEncoder renderPassEncoder, Buffer indirectBuffer, uint64 indirectOffset);
		public function void ProcRenderPassEncoderEnd(RenderPassEncoder renderPassEncoder);
		public function void ProcRenderPassEncoderEndOcclusionQuery(RenderPassEncoder renderPassEncoder);
		public function void ProcRenderPassEncoderEndPipelineStatisticsQuery(RenderPassEncoder renderPassEncoder);
		public function void ProcRenderPassEncoderExecuteBundles(RenderPassEncoder renderPassEncoder, uint32 bundlesCount, RenderBundle* bundles);
		public function void ProcRenderPassEncoderInsertDebugMarker(RenderPassEncoder renderPassEncoder, WGPUStringView markerLabel);
		public function void ProcRenderPassEncoderPopDebugGroup(RenderPassEncoder renderPassEncoder);
		public function void ProcRenderPassEncoderPushDebugGroup(RenderPassEncoder renderPassEncoder, WGPUStringView groupLabel);
		public function void ProcRenderPassEncoderSetBindGroup(RenderPassEncoder renderPassEncoder, uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets);
		public function void ProcRenderPassEncoderSetBlendConstant(RenderPassEncoder renderPassEncoder, Color* color);
		public function void ProcRenderPassEncoderSetIndexBuffer(RenderPassEncoder renderPassEncoder, Buffer buffer, IndexFormat format, uint64 offset, uint64 size);
		public function void ProcRenderPassEncoderSetPipeline(RenderPassEncoder renderPassEncoder, RenderPipeline pipeline);
		public function void ProcRenderPassEncoderSetScissorRect(RenderPassEncoder renderPassEncoder, uint32 x, uint32 y, uint32 width, uint32 height);
		public function void ProcRenderPassEncoderSetStencilReference(RenderPassEncoder renderPassEncoder, uint32 reference);
		public function void ProcRenderPassEncoderSetVertexBuffer(RenderPassEncoder renderPassEncoder, uint32 slot, Buffer buffer, uint64 offset, uint64 size);
		public function void ProcRenderPassEncoderSetViewport(RenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);
		public function BindGroupLayout ProcRenderPipelineGetBindGroupLayout(RenderPipeline renderPipeline, uint32 groupIndex);
		public function void ProcRenderPipelineSetLabel(RenderPipeline renderPipeline, WGPUStringView label);
		public function void ProcShaderModuleGetCompilationInfo(ShaderModule shaderModule, CompilationInfoCallback callback, void* userdata);
		public function void ProcShaderModuleSetLabel(ShaderModule shaderModule, WGPUStringView label);
		public function TextureFormat ProcSurfaceGetPreferredFormat(Surface surface, Adapter adapter);
		public function TextureView ProcSwapChainGetCurrentTextureView(SwapChain swapChain);
		public function void ProcSwapChainPresent(SwapChain swapChain);
		public function TextureView ProcTextureCreateView(Texture texture, TextureViewDescriptor* descriptor);
		public function void ProcTextureDestroy(Texture texture);
		public function void LogCallback(LogLevel level, WGPUStringView msg, void* userdata);

		[LinkName("wgpuCreateInstance")]
		public static extern Instance CreateInstance(InstanceDescriptor* descriptor);

		[LinkName("wgpuGetInstanceCapabilities")]
		public static extern Status wgpuGetInstanceCapabilities(InstanceCapabilities * capabilities);

		[LinkName("wgpuGetProcAddress")]
		public static extern Proc GetProcAddress(WGPUStringView* procName);

		[LinkName("wgpuAdapterGetFeatures")]
		public static extern c_size AdapterGetFeatures(Adapter adapter, SupportedFeatures* features);

		[LinkName("wgpuAdapterGetInfo")]
		public static extern void AdapterGetInfo(Adapter adapter, AdapterInfo* info);

		[LinkName("wgpuAdapterGetLimits")]
		public static extern c_bool AdapterGetLimits(Adapter adapter, Limits* limits);

		[LinkName("wgpuAdapterHasFeature")]
		public static extern c_bool AdapterHasFeature(Adapter adapter, FeatureName feature);

		[LinkName("wgpuAdapterRequestDevice")]
		public static extern void AdapterRequestDevice(Adapter adapter, DeviceDescriptor* descriptor, RequestDeviceCallbackInfo callbackInfo);

		[LinkName("wgpuAdapterAddRef")]
		public static extern void wgpuAdapterAddRef(Adapter adapter);

		[LinkName("wgpuAdapterRelease")]
		public static extern void wgpuAdapterRelease(Adapter adapter);

		[LinkName("wgpuAdapterInfoFreeMembers")]
		public static extern void wgpuAdapterInfoFreeMembers(AdapterInfo adapterInfo);

		[LinkName("wgpuBindGroupSetLabel")]
		public static extern void wgpuBindGroupSetLabel(BindGroup bindGroup, WGPUStringView label);

		[LinkName("wgpuBindGroupAddRef")]
		public static extern void wgpuBindGroupAddRef(BindGroup bindGroup);

		[LinkName("wgpuBindGroupRelease")]
		public static extern void wgpuBindGroupRelease(BindGroup bindGroup);

		[LinkName("wgpuBindGroupLayoutSetLabel")]
		public static extern void wgpuBindGroupLayoutSetLabel(BindGroupLayout bindGroupLayout, WGPUStringView label);

		[LinkName("wgpuBindGroupLayoutAddRef")]
		public static extern void wgpuBindGroupLayoutAddRef(BindGroupLayout bindGroupLayout);

		[LinkName("wgpuBindGroupLayoutRelease")]
		public static extern void wgpuBindGroupLayoutRelease(BindGroupLayout bindGroupLayout);

		[LinkName("wgpuBufferDestroy")]
		public static extern void BufferDestroy(Buffer buffer);

		[LinkName("wgpuBufferGetConstMappedRange")]
		public static extern void* BufferGetConstMappedRange(Buffer buffer, c_size offset, c_size size);

		[LinkName("wgpuBufferGetMapState")]
		public static extern BufferMapState BufferGetMapState(Buffer buffer);

		[LinkName("wgpuBufferGetMappedRange")]
		public static extern void* BufferGetMappedRange(Buffer buffer, c_size offset, c_size size);

		[LinkName("wgpuBufferGetSize")]
		public static extern uint64 BufferGetSize(Buffer buffer);

		[LinkName("wgpuBufferGetUsage")]
		public static extern BufferUsage BufferGetUsage(Buffer buffer);

		[LinkName("wgpuBufferMapAsync")]
		public static extern Future BufferMapAsync(Buffer buffer, MapMode mode, c_size offset, c_size size, BufferMapCallback callback, void* userdata);

		[LinkName("wgpuBufferSetLabel")]
		public static extern void BufferSetLabel(Buffer buffer, WGPUStringView label);

		[LinkName("wgpuBufferUnmap")]
		public static extern void BufferUnmap(Buffer buffer);

		[LinkName("wgpuBufferAddRef")]
		public static extern void BufferAddRef(Buffer buffer);

		[LinkName("wgpuBufferRelease")]
		public static extern void BufferRelease(Buffer buffer);

		[LinkName("wgpuCommandBufferSetLabel")]
		public static extern void CommandBufferSetLabel(CommandBuffer commandBuffer, WGPUStringView label);

		[LinkName("wgpuCommandBufferAddRef")]
		public static extern void CommandBufferAddRef(CommandBuffer commandBuffer);

		[LinkName("wgpuCommandBufferRelease")]
		public static extern void CommandBufferRelease(CommandBuffer commandBuffer);

		[LinkName("wgpuCommandEncoderBeginComputePass")]
		public static extern ComputePassEncoder CommandEncoderBeginComputePass(CommandEncoder commandEncoder, ComputePassDescriptor* descriptor);

		[LinkName("wgpuCommandEncoderBeginRenderPass")]
		public static extern RenderPassEncoder CommandEncoderBeginRenderPass(CommandEncoder commandEncoder, RenderPassDescriptor* descriptor);

		[LinkName("wgpuCommandEncoderClearBuffer")]
		public static extern void CommandEncoderClearBuffer(CommandEncoder commandEncoder, Buffer buffer, uint64 offset, uint64 size);

		[LinkName("wgpuCommandEncoderCopyBufferToBuffer")]
		public static extern void CommandEncoderCopyBufferToBuffer(CommandEncoder commandEncoder, Buffer source, uint64 sourceOffset, Buffer destination, uint64 destinationOffset, uint64 size);

		[LinkName("wgpuCommandEncoderCopyBufferToTexture")]
		public static extern void CommandEncoderCopyBufferToTexture(CommandEncoder commandEncoder, TexelCopyBufferInfo* source, TexelCopyTextureInfo* destination, Extent3D* copySize);

		[LinkName("wgpuCommandEncoderCopyTextureToBuffer")]
		public static extern void CommandEncoderCopyTextureToBuffer(CommandEncoder commandEncoder, TexelCopyTextureInfo* source, TexelCopyBufferInfo* destination, Extent3D* copySize);

		[LinkName("wgpuCommandEncoderCopyTextureToTexture")]
		public static extern void CommandEncoderCopyTextureToTexture(CommandEncoder commandEncoder, TexelCopyTextureInfo* source, TexelCopyTextureInfo* destination, Extent3D* copySize);

		[LinkName("wgpuCommandEncoderFinish")]
		public static extern CommandBuffer CommandEncoderFinish(CommandEncoder commandEncoder, CommandBufferDescriptor* descriptor);

		[LinkName("wgpuCommandEncoderInsertDebugMarker")]
		public static extern void CommandEncoderInsertDebugMarker(CommandEncoder commandEncoder, WGPUStringView markerLabel);

		[LinkName("wgpuCommandEncoderPopDebugGroup")]
		public static extern void CommandEncoderPopDebugGroup(CommandEncoder commandEncoder);

		[LinkName("wgpuCommandEncoderPushDebugGroup")]
		public static extern void CommandEncoderPushDebugGroup(CommandEncoder commandEncoder, WGPUStringView groupLabel);

		[LinkName("wgpuCommandEncoderResolveQuerySet")]
		public static extern void CommandEncoderResolveQuerySet(CommandEncoder commandEncoder, QuerySet querySet, uint32 firstQuery, uint32 queryCount, Buffer destination, uint64 destinationOffset);

		[LinkName("wgpuCommandEncoderSetLabel")]
		public static extern void CommandEncoderSetLabel(CommandEncoder commandEncoder, WGPUStringView label);

		[LinkName("wgpuCommandEncoderWriteTimestamp")]
		public static extern void CommandEncoderWriteTimestamp(CommandEncoder commandEncoder, QuerySet querySet, uint32 queryIndex);

		[LinkName("wgpuCommandEncoderAddRef")]
		public static extern void CommandEncoderAddRef(CommandEncoder commandEncoder);

		[LinkName("wgpuCommandEncoderRelease")]
		public static extern void CommandEncoderRelease(CommandEncoder commandEncoder);

		//[LinkName("wgpuComputePassEncoderBeginPipelineStatisticsQuery")]
		//public static extern void ComputePassEncoderBeginPipelineStatisticsQuery(ComputePassEncoder computePassEncoder, QuerySet querySet, uint32 queryIndex);

		[LinkName("wgpuComputePassEncoderDispatchWorkgroups")]
		public static extern void ComputePassEncoderDispatchWorkgroups(ComputePassEncoder computePassEncoder, uint32 workgroupCountX, uint32 workgroupCountY, uint32 workgroupCountZ);

		[LinkName("wgpuComputePassEncoderDispatchIndirectWorkgroups")]
		public static extern void ComputePassEncoderDispatchWorkgroupsIndirect(ComputePassEncoder computePassEncoder, Buffer indirectBuffer, uint64 indirectOffset);

		[LinkName("wgpuComputePassEncoderEnd")]
		public static extern void ComputePassEncoderEnd(ComputePassEncoder computePassEncoder);

		//[LinkName("wgpuComputePassEncoderEndPipelineStatisticsQuery")]
		//public static extern void ComputePassEncoderEndPipelineStatisticsQuery(ComputePassEncoder computePassEncoder);

		[LinkName("wgpuComputePassEncoderInsertDebugMarker")]
		public static extern void ComputePassEncoderInsertDebugMarker(ComputePassEncoder computePassEncoder, WGPUStringView markerLabel);

		[LinkName("wgpuComputePassEncoderPopDebugGroup")]
		public static extern void ComputePassEncoderPopDebugGroup(ComputePassEncoder computePassEncoder);

		[LinkName("wgpuComputePassEncoderPushDebugGroup")]
		public static extern void ComputePassEncoderPushDebugGroup(ComputePassEncoder computePassEncoder, WGPUStringView groupLabel);

		[LinkName("wgpuComputePassEncoderSetBindGroup")]
		public static extern void ComputePassEncoderSetBindGroup(ComputePassEncoder computePassEncoder, uint32 groupIndex, BindGroup group, uint32 dynamicOffsetCount, uint32* dynamicOffsets);

		[LinkName("wgpuComputePassEncoderSetLabel")]
		public static extern void ComputePassEncoderSetLabel(ComputePassEncoder computePassEncoder, WGPUStringView label);

		[LinkName("wgpuComputePassEncoderSetPipeline")]
		public static extern void ComputePassEncoderSetPipeline(ComputePassEncoder computePassEncoder, ComputePipeline pipeline);

		[LinkName("wgpuComputePassEncoderAddRef")]
		public static extern void ComputePassEncoderAddRef(ComputePassEncoder computePassEncoder);

		[LinkName("wgpuComputePassEncoderRelease")]
		public static extern void ComputePassEncoderRelease(ComputePassEncoder computePassEncoder);

		[LinkName("wgpuComputePipelineGetBindGroupLayout")]
		public static extern BindGroupLayout ComputePipelineGetBindGroupLayout(ComputePipeline computePipeline, uint32 groupIndex);

		[LinkName("wgpuComputePipelineSetLabel")]
		public static extern void ComputePipelineSetLabel(ComputePipeline computePipeline, WGPUStringView label);

		[LinkName("wgpuComputePipelineAddRef")]
		public static extern void ComputePipelineAddRef(ComputePipeline computePipeline);

		[LinkName("wgpuComputePipelineRelease")]
		public static extern void ComputePipelineRelease(ComputePipeline computePipeline);

		[LinkName("wgpuDeviceCreateBindGroup")]
		public static extern BindGroup DeviceCreateBindGroup(Device device, BindGroupDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateBindGroupLayout")]
		public static extern BindGroupLayout DeviceCreateBindGroupLayout(Device device, BindGroupLayoutDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateBuffer")]
		public static extern Buffer DeviceCreateBuffer(Device device, BufferDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateCommandEncoder")]
		public static extern CommandEncoder DeviceCreateCommandEncoder(Device device, CommandEncoderDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateComputePipeline")]
		public static extern ComputePipeline DeviceCreateComputePipeline(Device device, ComputePipelineDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateComputePipelineAsync")]
		public static extern Future DeviceCreateComputePipelineAsync(Device device, ComputePipelineDescriptor* descriptor, CreateComputePipelineAsyncCallbackInfo callback, void* userdata);

		[LinkName("wgpuDeviceCreatePipelineLayout")]
		public static extern PipelineLayout DeviceCreatePipelineLayout(Device device, PipelineLayoutDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateQuerySet")]
		public static extern QuerySet DeviceCreateQuerySet(Device device, QuerySetDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateRenderBundleEncoder")]
		public static extern RenderBundleEncoder DeviceCreateRenderBundleEncoder(Device device, RenderBundleEncoderDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateRenderPipeline")]
		public static extern RenderPipeline DeviceCreateRenderPipeline(Device device, RenderPipelineDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateRenderPipelineAsync")]
		public static extern Future DeviceCreateRenderPipelineAsync(Device device, RenderPipelineDescriptor* descriptor, CreateRenderPipelineAsyncCallbackInfo callback, void* userdata);

		[LinkName("wgpuDeviceCreateSampler")]
		public static extern Sampler DeviceCreateSampler(Device device, SamplerDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateShaderModule")]
		public static extern ShaderModule DeviceCreateShaderModule(Device device, ShaderModuleDescriptor* descriptor);

		//[LinkName("wgpuDeviceCreateSwapChain")]
		//public static extern SwapChain DeviceCreateSwapChain(Device device, Surface surface, SwapChainDescriptor* descriptor);

		[LinkName("wgpuDeviceCreateTexture")]
		public static extern Texture DeviceCreateTexture(Device device, TextureDescriptor* descriptor);

		[LinkName("wgpuDeviceDestroy")]
		public static extern void DeviceDestroy(Device device);

		[LinkName("wgpuDeviceGetAdapterInfo")]
		public static extern AdapterInfo DeviceGetAdapterInfo(Device device);

		[LinkName("wgpuDeviceGetFeatures")]
		public static extern c_size DeviceGetFeatures(Device device, SupportedFeatures* features);

		[LinkName("wgpuDeviceGetLimits")]
		public static extern c_bool DeviceGetLimits(Device device, Limits* limits);

		[LinkName("wgpuDeviceGetLostFuture")]
		public static extern Future DeviceGetLostFuture(Device device);

		[LinkName("wgpuDeviceGetQueue")]
		public static extern Queue DeviceGetQueue(Device device);

		[LinkName("wgpuDeviceHasFeature")]
		public static extern c_bool DeviceHasFeature(Device device, FeatureName feature);

		[LinkName("wgpuDevicePopErrorScope")]
		public static extern Future DevicePopErrorScope(Device device, PopErrorScopeCallbackInfo callback);

		[LinkName("wgpuDevicePushErrorScope")]
		public static extern void DevicePushErrorScope(Device device, ErrorFilter filter);

		//[LinkName("wgpuDeviceSetDeviceLostCallback")]
		//public static extern void DeviceSetDeviceLostCallback(Device device, DeviceLostCallback callback, void* userdata);

		//[LinkName("wgpuDeviceSetUncapturedErrorCallback")]
		//public static extern void DeviceSetUncapturedErrorCallback(Device device, ErrorCallback callback, void* userdata);

		[LinkName("wgpuDeviceSetLabel")]
		public static extern void DeviceSetLabel(Device device, WGPUStringView label);

		[LinkName("wgpuDeviceAddRef")]
		public static extern void DeviceAddRef(Device device);

		[LinkName("wgpuDeviceRelease")]
		public static extern void DeviceRelease(Device device);

		[LinkName("wgpuInstanceCreateSurface")]
		public static extern Surface InstanceCreateSurface(Instance instance, SurfaceDescriptor* descriptor);

		[LinkName("wgpuInstanceGetWGSLLanguageFeatures")]
		public static extern Status InstanceGetWGSLLanguageFeatures(Instance instance, SupportedWGSLLanguageFeatures * features);

		[LinkName("wgpuInstanceHasWGSLLanguageFeature")]
		public static extern c_bool InstanceHasWGSLLanguageFeature(Instance instance, WGSLLanguageFeatureName feature);

		[LinkName("wgpuInstanceProcessEvents")]
		public static extern void InstanceProcessEvents(Instance instance);

		[LinkName("wgpuInstanceRequestAdapter")]
		public static extern Future InstanceRequestAdapter(Instance instance, RequestAdapterOptions* options, RequestAdapterCallbackInfo callback);

		[LinkName("wgpuInstanceWaitAny")]
		public static extern WaitStatus wgpuInstanceWaitAny(Instance instance, c_size futureCount, FutureWaitInfo * futures, uint64 timeoutNS);

		[LinkName("wgpuInstanceAddRef")]
		public static extern void wgpuInstanceAddRef(Instance instance);

		[LinkName("wgpuInstanceRelease")]
		public static extern void wgpuInstanceRelease(Instance instance);

		[LinkName("wgpuPipelineLayoutSetLabel")]
		public static extern void wgpuPipelineLayoutSetLabel(PipelineLayout pipelineLayout, WGPUStringView label);

		[LinkName("wgpuPipelineLayoutAddRef")]
		public static extern void wgpuPipelineLayoutAddRef(PipelineLayout pipelineLayout);

		[LinkName("wgpuPipelineLayoutRelease")]
		public static extern void wgpuPipelineLayoutRelease(PipelineLayout pipelineLayout);

		[LinkName("wgpuQuerySetDestroy")]
		public static extern void QuerySetDestroy(QuerySet querySet);

		[LinkName("wgpuQuerySetGetCount")]
		public static extern uint32 wgpuQuerySetGetCount(QuerySet querySet);

		[LinkName("wgpuQuerySetGetType")]
		public static extern QueryType wgpuQuerySetGetType(QuerySet querySet);

		[LinkName("wgpuQuerySetSetLabel")]
		public static extern void wgpuQuerySetSetLabel(QuerySet querySet, WGPUStringView label);

		[LinkName("wgpuQuerySetAddRef")]
		public static extern void wgpuQuerySetAddRef(QuerySet querySet);

		[LinkName("wgpuQuerySetRelease")]
		public static extern void wgpuQuerySetRelease(QuerySet querySet);

		[LinkName("wgpuQueueOnSubmittedWorkDone")]
		public static extern void QueueOnSubmittedWorkDone(Queue queue, QueueWorkDoneCallback callback, void* userdata);

		[LinkName("wgpuQueueSetLabel")]
		public static extern void wgpuQueueSetLabel(Queue queue, WGPUStringView label);

		[LinkName("wgpuQueueSubmit")]
		public static extern void QueueSubmit(Queue queue, uint32 commandCount, CommandBuffer* commands);

		[LinkName("wgpuQueueWriteBuffer")]
		public static extern void QueueWriteBuffer(Queue queue, Buffer buffer, uint64 bufferOffset, void* data, c_size size);

		[LinkName("wgpuQueueWriteTexture")]
		public static extern void QueueWriteTexture(Queue queue, TexelCopyTextureInfo* destination, void* data, c_size dataSize, TexelCopyBufferLayout* dataLayout, Extent3D* writeSize);

		[LinkName("wgpuQueueAddRef")]
		public static extern void wgpuQueueAddRef(Queue queue);

		[LinkName("wgpuQueueRelease")]
		public static extern void wgpuQueueRelease(Queue queue);

		[LinkName("wgpuRenderBundleSetLabel")]
		public static extern void wgpuRenderBundleSetLabel(RenderBundle renderBundle, WGPUStringView label);

		[LinkName("wgpuRenderBundleAddRef")]
		public static extern void wgpuRenderBundleAddRef(RenderBundle renderBundle);

		[LinkName("wgpuRenderBundleRelease")]
		public static extern void wgpuRenderBundleRelease(RenderBundle renderBundle);
		
		[LinkName("wgpuRenderBundleEncoderDraw")]
		public static extern void RenderBundleEncoderDraw(RenderBundleEncoder renderBundleEncoder, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance);

		[LinkName("wgpuRenderBundleEncoderDrawIndexed")]
		public static extern void RenderBundleEncoderDrawIndexed(RenderBundleEncoder renderBundleEncoder, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance);

		[LinkName("wgpuRenderBundleEncoderDrawIndexedIndirect")]
		public static extern void RenderBundleEncoderDrawIndexedIndirect(RenderBundleEncoder renderBundleEncoder, Buffer indirectBuffer, uint64 indirectOffset);

		[LinkName("wgpuRenderBundleEncoderDrawIndirect")]
		public static extern void RenderBundleEncoderDrawIndirect(RenderBundleEncoder renderBundleEncoder, Buffer indirectBuffer, uint64 indirectOffset);

		[LinkName("wgpuRenderBundleEncoderFinish")]
		public static extern RenderBundle RenderBundleEncoderFinish(RenderBundleEncoder renderBundleEncoder, RenderBundleDescriptor* descriptor);

		[LinkName("wgpuRenderBundleEncoderInsertDebugMarker")]
		public static extern void RenderBundleEncoderInsertDebugMarker(RenderBundleEncoder renderBundleEncoder, WGPUStringView markerLabel);

		[LinkName("wgpuRenderBundleEncoderPopDebugGroup")]
		public static extern void RenderBundleEncoderPopDebugGroup(RenderBundleEncoder renderBundleEncoder);

		[LinkName("wgpuRenderBundleEncoderPushDebugGroup")]
		public static extern void RenderBundleEncoderPushDebugGroup(RenderBundleEncoder renderBundleEncoder, WGPUStringView groupLabel);

		[LinkName("wgpuRenderBundleEncoderSetBindGroup")]
		public static extern void RenderBundleEncoderSetBindGroup(RenderBundleEncoder renderBundleEncoder, uint32 groupIndex, BindGroup group, c_size dynamicOffsetCount, uint32* dynamicOffsets);

		[LinkName("wgpuRenderBundleEncoderSetIndexBuffer")]
		public static extern void RenderBundleEncoderSetIndexBuffer(RenderBundleEncoder renderBundleEncoder, Buffer buffer, IndexFormat format, uint64 offset, uint64 size);

		[LinkName("wgpuRenderBundleEncoderSetLabel")]
		public static extern void wgpuRenderBundleEncoderSetLabel(RenderBundleEncoder renderBundleEncoder, WGPUStringView label);

		[LinkName("wgpuRenderBundleEncoderSetPipeline")]
		public static extern void RenderBundleEncoderSetPipeline(RenderBundleEncoder renderBundleEncoder, RenderPipeline pipeline);

		[LinkName("wgpuRenderBundleEncoderSetVertexBuffer")]
		public static extern void RenderBundleEncoderSetVertexBuffer(RenderBundleEncoder renderBundleEncoder, uint32 slot, Buffer buffer, uint64 offset, uint64 size);

		[LinkName("wgpuRenderBundleEncoderAddRef")]
		public static extern void wgpuRenderBundleEncoderAddRef(RenderBundleEncoder renderBundleEncoder);

		[LinkName("wgpuRenderBundleEncoderRelease")]
		public static extern void wgpuRenderBundleEncoderRelease(RenderBundleEncoder renderBundleEncoder);

		[LinkName("wgpuRenderPassEncoderBeginOcclusionQuery")]
		public static extern void RenderPassEncoderBeginOcclusionQuery(RenderPassEncoder renderPassEncoder, uint32 queryIndex);

		//[LinkName("wgpuRenderPassEncoderBeginPipelineStatisticsQuery")]
		//public static extern void RenderPassEncoderBeginPipelineStatisticsQuery(RenderPassEncoder renderPassEncoder, QuerySet querySet, uint32 queryIndex);

		[LinkName("wgpuRenderPassEncoderDraw")]
		public static extern void RenderPassEncoderDraw(RenderPassEncoder renderPassEncoder, uint32 vertexCount, uint32 instanceCount, uint32 firstVertex, uint32 firstInstance);

		[LinkName("wgpuRenderPassEncoderDrawIndexed")]
		public static extern void RenderPassEncoderDrawIndexed(RenderPassEncoder renderPassEncoder, uint32 indexCount, uint32 instanceCount, uint32 firstIndex, int32 baseVertex, uint32 firstInstance);

		[LinkName("wgpuRenderPassEncoderDrawIndexedIndirect")]
		public static extern void RenderPassEncoderDrawIndexedIndirect(RenderPassEncoder renderPassEncoder, Buffer indirectBuffer, uint64 indirectOffset);

		[LinkName("wgpuRenderPassEncoderDrawIndirect")]
		public static extern void RenderPassEncoderDrawIndirect(RenderPassEncoder renderPassEncoder, Buffer indirectBuffer, uint64 indirectOffset);

		[LinkName("wgpuRenderPassEncoderEnd")]
		public static extern void RenderPassEncoderEnd(RenderPassEncoder renderPassEncoder);

		[LinkName("wgpuRenderPassEncoderEndOcclusionQuery")]
		public static extern void RenderPassEncoderEndOcclusionQuery(RenderPassEncoder renderPassEncoder);

		//[LinkName("wgpuRenderPassEncoderEndPipelineStatisticsQuery")]
		//public static extern void RenderPassEncoderEndPipelineStatisticsQuery(RenderPassEncoder renderPassEncoder);

		[LinkName("wgpuRenderPassEncoderExecuteBundles")]
		public static extern void RenderPassEncoderExecuteBundles(RenderPassEncoder renderPassEncoder, c_size bundlesCount, RenderBundle* bundles);

		[LinkName("wgpuRenderPassEncoderInsertDebugMarker")]
		public static extern void RenderPassEncoderInsertDebugMarker(RenderPassEncoder renderPassEncoder, WGPUStringView markerLabel);

		[LinkName("wgpuRenderPassEncoderPopDebugGroup")]
		public static extern void RenderPassEncoderPopDebugGroup(RenderPassEncoder renderPassEncoder);

		[LinkName("wgpuRenderPassEncoderPushDebugGroup")]
		public static extern void RenderPassEncoderPushDebugGroup(RenderPassEncoder renderPassEncoder, WGPUStringView groupLabel);

		[LinkName("wgpuRenderPassEncoderSetBindGroup")]
		public static extern void RenderPassEncoderSetBindGroup(RenderPassEncoder renderPassEncoder, uint32 groupIndex, BindGroup group, c_size dynamicOffsetCount, uint32* dynamicOffsets);

		[LinkName("wgpuRenderPassEncoderSetBlendConstant")]
		public static extern void RenderPassEncoderSetBlendConstant(RenderPassEncoder renderPassEncoder, Color* color);

		[LinkName("wgpuRenderPassEncoderSetIndexBuffer")]
		public static extern void RenderPassEncoderSetIndexBuffer(RenderPassEncoder renderPassEncoder, Buffer buffer, IndexFormat format, uint64 offset, uint64 size);

		[LinkName("wgpuRenderPassEncoderSetLabel")]
		public static extern void wgpuRenderPassEncoderSetLabel(RenderPassEncoder renderPassEncoder, WGPUStringView label);

		[LinkName("wgpuRenderPassEncoderSetPipeline")]
		public static extern void RenderPassEncoderSetPipeline(RenderPassEncoder renderPassEncoder, RenderPipeline pipeline);

		[LinkName("wgpuRenderPassEncoderSetScissorRect")]
		public static extern void RenderPassEncoderSetScissorRect(RenderPassEncoder renderPassEncoder, uint32 x, uint32 y, uint32 width, uint32 height);

		[LinkName("wgpuRenderPassEncoderSetStencilReference")]
		public static extern void RenderPassEncoderSetStencilReference(RenderPassEncoder renderPassEncoder, uint32 reference);

		[LinkName("wgpuRenderPassEncoderSetVertexBuffer")]
		public static extern void RenderPassEncoderSetVertexBuffer(RenderPassEncoder renderPassEncoder, uint32 slot, Buffer buffer, uint64 offset, uint64 size);

		[LinkName("wgpuRenderPassEncoderSetViewport")]
		public static extern void RenderPassEncoderSetViewport(RenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);

		[LinkName("wgpuRenderPassEncoderAddRef")]
		public static extern void wgpuRenderPassEncoderAddRef(RenderPassEncoder renderPassEncoder);

		[LinkName("wgpuRenderPassEncoderRelease")]
		public static extern void wgpuRenderPassEncoderRelease(RenderPassEncoder renderPassEncoder);

		[LinkName("wgpuRenderPipelineGetBindGroupLayout")]
		public static extern BindGroupLayout RenderPipelineGetBindGroupLayout(RenderPipeline renderPipeline, uint32 groupIndex);

		[LinkName("wgpuRenderPipelineSetLabel")]
		public static extern void RenderPipelineSetLabel(RenderPipeline renderPipeline, WGPUStringView label);

		[LinkName("wgpuRenderPipelineAddRef")]
		public static extern void wgpuRenderPipelineAddRef(RenderPipeline renderPipeline);

		[LinkName("wgpuRenderPipelineRelease")]
		public static extern void wgpuRenderPipelineRelease(RenderPipeline renderPipeline);

		[LinkName("wgpuSamplerSetLabel")]
		public static extern void wgpuSamplerSetLabel(Sampler sampler, WGPUStringView label);

		[LinkName("wgpuSamplerAddRef")]
		public static extern void wgpuSamplerAddRef(Sampler sampler);

		[LinkName("wgpuSamplerRelease")]
		public static extern void wgpuSamplerRelease(Sampler sampler);

		[LinkName("wgpuShaderModuleGetCompilationInfo")]
		public static extern Future ShaderModuleGetCompilationInfo(ShaderModule shaderModule, CompilationInfoCallbackInfo callbackInfo);

		[LinkName("wgpuShaderModuleSetLabel")]
		public static extern void ShaderModuleSetLabel(ShaderModule shaderModule, WGPUStringView label);

		[LinkName("wgpuShaderModuleAddRef")]
		public static extern void wgpuShaderModuleAddRef(ShaderModule shaderModule);

		[LinkName("wgpuShaderModuleRelease")]
		public static extern void wgpuShaderModuleRelease(ShaderModule shaderModule);

		[LinkName("wgpuSupportedFeaturesFreeMembers")]
		public static extern void wgpuSupportedFeaturesFreeMembers(SupportedFeatures supportedFeatures);

		[LinkName("wgpuSupportedWGSLLanguageFeaturesFreeMembers")]
		public static extern void wgpuSupportedWGSLLanguageFeaturesFreeMembers(SupportedWGSLLanguageFeatures supportedWGSLLanguageFeatures);

		[LinkName("wgpuSurfaceConfigure")]
		public static extern void wgpuSurfaceConfigure(Surface surface, SurfaceConfiguration* config);

		[LinkName("wgpuSurfaceGetCapabilities")]
		public static extern Status wgpuSurfaceGetCapabilities(Surface surface, Adapter adapter, SurfaceCapabilities* capabilities);

		[LinkName("wgpuSurfaceGetCurrentTexture")]
		public static extern void wgpuSurfaceGetCurrentTexture(Surface surface, SurfaceTexture* surfaceTexture);

		[LinkName("wgpuSurfacePresent")]
		public static extern Status wgpuSurfacePresent(Surface surface);

		[LinkName("wgpuSurfaceSetLabel")]
		public static extern void wgpuSurfaceSetLabel(Surface surface, WGPUStringView label);

		[LinkName("wgpuSurfaceUnconfigure")]
		public static extern void wgpuSurfaceUnconfigure(Surface surface);

		[LinkName("wgpuSurfaceAddRef")]
		public static extern void wgpuSurfaceAddRef(Surface surface);

		[LinkName("wgpuSurfaceRelease")]
		public static extern void wgpuSurfaceRelease(Surface surface);

		[LinkName("wgpuSurfaceCapabilitiesFreeMembers")]
		public static extern void wgpuSurfaceCapabilitiesFreeMembers(SurfaceCapabilities surfaceCapabilities);

		//[LinkName("wgpuSurfaceGetPreferredFormat")]
		//public static extern TextureFormat SurfaceGetPreferredFormat(Surface surface, Adapter adapter);

		//[LinkName("wgpuSwapChainGetCurrentTextureView")]
		//public static extern TextureView SwapChainGetCurrentTextureView(SwapChain swapChain);

		//[LinkName("wgpuSwapChainPresent")]
		//public static extern void SwapChainPresent(SwapChain swapChain);

		[LinkName("wgpuTextureCreateView")]
		public static extern TextureView TextureCreateView(Texture texture, TextureViewDescriptor* descriptor);

		[LinkName("wgpuTextureDestroy")]
		public static extern void TextureDestroy(Texture texture);

		[LinkName("wgpuTextureGetDepthOrArrayLayers")]
		public static extern uint32 wgpuTextureGetDepthOrArrayLayers(Texture texture);

		[LinkName("wgpuTextureGetDimension")]
		public static extern TextureDimension wgpuTextureGetDimension(Texture texture);

		[LinkName("wgpuTextureGetFormat")]
		public static extern TextureFormat wgpuTextureGetFormat(Texture texture);

		[LinkName("wgpuTextureGetHeight")]
		public static extern uint32 wgpuTextureGetHeight(Texture texture);

		[LinkName("wgpuTextureGetMipLevelCount")]
		public static extern uint32 wgpuTextureGetMipLevelCount(Texture texture);

		[LinkName("wgpuTextureGetSampleCount")]
		public static extern uint32 wgpuTextureGetSampleCount(Texture texture);

		[LinkName("wgpuTextureGetUsage")]
		public static extern TextureUsage wgpuTextureGetUsage(Texture texture);

		[LinkName("wgpuTextureGetWidth")]
		public static extern uint32 wgpuTextureGetWidth(Texture texture);

		[LinkName("wgpuTextureSetLabel")]
		public static extern void wgpuTextureSetLabel(Texture texture, WGPUStringView label);

		[LinkName("wgpuTextureAddRef")]
		public static extern void wgpuTextureAddRef(Texture texture);

		[LinkName("wgpuTextureRelease")]
		public static extern void wgpuTextureRelease(Texture texture);

		[LinkName("wgpuTextureViewSetLabel")]
		public static extern void wgpuTextureViewSetLabel(TextureView textureView, WGPUStringView label);

		[LinkName("wgpuTextureViewAddRef")]
		public static extern void wgpuTextureViewAddRef(TextureView textureView);

		[LinkName("wgpuTextureViewRelease")]
		public static extern void wgpuTextureViewRelease(TextureView textureView);

		//wgpu.h
		//new (added to Instance class)
		[LinkName("wgpuGenerateReport")]
		public static extern void GenerateReport(Instance instance, GlobalReport* report);

		//new (added to Instance class)
		[LinkName("wgpuInstanceEnumerateAdapters")]
		public static extern c_size InstanceEnumerateAdapters(Instance instance, InstanceEnumerateAdapterOptions* options, Adapter* adapters);

		//new (added to Queue class)
		[LinkName("wgpuQueueSubmitForIndex")]
		public static extern uint64 QueueSubmitForIndex(Queue queue, c_size commandCount, CommandBuffer* commands);

		[LinkName("wgpuDevicePoll")]
		public static extern void DevicePoll(Device device, c_bool wait, uint64* wrappedSubmissionIndex);

		//new (added to Device class)
		[LinkName("wgpuDeviceCreateShaderModuleSpirV")]
		public static extern ShaderModule DeviceCreateShaderModuleSpirV(Device device, ShaderModuleDescriptorSpirV* descriptor);

		[LinkName("wgpuSetLogCallback")]
		public static extern void SetLogCallback(LogCallback callback, void* userdata);

		[LinkName("wgpuSetLogLevel")]
		public static extern void SetLogLevel(LogLevel level);

		[LinkName("wgpuGetVersion")]
		public static extern uint32 GetVersion();

		[LinkName("wgpuRenderPassEncoderSetPushConstants")]
		public static extern void RenderPassEncoderSetPushConstants(RenderPassEncoder encoder, ShaderStage stages, uint32 offset, uint32 sizeBytes, void* data);

		//new
		[LinkName("wgpuComputePassEncoderSetPushConstants")]
		public static extern void ComputePassEncoderSetPushConstants(ComputePassEncoder encoder, uint32 offset, uint32 sizeBytes, void* data);
		//new
		[LinkName("wgpuRenderBundleEncoderSetPushConstants")]
		public static extern void RenderBundleEncoderSetPushConstants(RenderBundleEncoder encoder, ShaderStage stages, uint32 offset, uint32 sizeBytes, void* data);
		//new
		[LinkName("wgpuRenderPassEncoderMultiDrawIndirect")]
		public static extern void RenderPassEncoderMultiDrawIndirect(RenderPassEncoder encoder, Buffer buffer, uint64 offset, uint32 count);
		//new
		[LinkName("wgpuRenderPassEncoderMultiDrawIndexedIndirect")]
		public static extern void RenderPassEncoderMultiDrawIndexedIndirect(RenderPassEncoder encoder, Buffer buffer, uint64 offset, uint32 count);
		//new
		[LinkName("wgpuRenderPassEncoderMultiDrawIndirectCount")]
		public static extern void RenderPassEncoderMultiDrawIndirectCount(RenderPassEncoder encoder, Buffer buffer, uint64 offset, Buffer count_buffer, uint64 count_buffer_offset, uint32 max_count);
		//new
		[LinkName("wgpuRenderPassEncoderMultiDrawIndexedIndirectCount")]
		public static extern void RenderPassEncoderMultiDrawIndexedIndirectCount(RenderPassEncoder encoder, Buffer buffer, uint64 offset, Buffer count_buffer, uint64 count_buffer_offset, uint32 max_count);
		//moved
		[LinkName("wgpuComputePassEncoderBeginPipelineStatisticsQuery")]
		public static extern void ComputePassEncoderBeginPipelineStatisticsQuery(ComputePassEncoder computePassEncoder, QuerySet querySet, uint32 queryIndex);
		//moved
		[LinkName("wgpuComputePassEncoderEndPipelineStatisticsQuery")]
		public static extern void ComputePassEncoderEndPipelineStatisticsQuery(ComputePassEncoder computePassEncoder);
		//moved
		[LinkName("wgpuRenderPassEncoderBeginPipelineStatisticsQuery")]
		public static extern void RenderPassEncoderBeginPipelineStatisticsQuery(RenderPassEncoder renderPassEncoder, QuerySet querySet, uint32 queryIndex);
		//moved
		[LinkName("wgpuRenderPassEncoderEndPipelineStatisticsQuery")]
		public static extern void RenderPassEncoderEndPipelineStatisticsQuery(RenderPassEncoder renderPassEncoder);
		//new
		[LinkName("wgpuComputePassEncoderWriteTimestamp")]
		public static extern void ComputePassEncoderWriteTimestamp(ComputePassEncoder computePassEncoder, QuerySet querySet, uint32 queryIndex);
		//new
		[LinkName("wgpuRenderPassEncoderWriteTimestamp")]
		public static extern void RenderPassEncoderWriteTimestamp(RenderPassEncoder renderPassEncoder, QuerySet querySet, uint32 queryIndex);

		//[LinkName("wgpuBufferDrop")]
		//public static extern void BufferDrop(Buffer buffer);

		//[LinkName("wgpuCommandEncoderDrop")]
		//public static extern void CommandEncoderDrop(CommandEncoder commandEncoder);

		//[LinkName("wgpuDeviceDrop")]
		//public static extern void DeviceDrop(Device device);

		//[LinkName("wgpuQuerySetDrop")]
		//public static extern void QuerySetDrop(QuerySet querySet);

		//[LinkName("wgpuRenderPipelineDrop")]
		//public static extern void RenderPipelineDrop(RenderPipeline renderPipeline);

		//[LinkName("wgpuTextureDrop")]
		//public static extern void TextureDrop(Texture texture);

		//[LinkName("wgpuTextureViewDrop")]
		//public static extern void TextureViewDrop(TextureView textureView);

		//[LinkName("wgpuSamplerDrop")]
		//public static extern void SamplerDrop(Sampler sampler);

		//[LinkName("wgpuBindGroupLayoutDrop")]
		//public static extern void BindGroupLayoutDrop(BindGroupLayout bindGroupLayout);

		//[LinkName("wgpuPipelineLayoutDrop")]
		//public static extern void PipelineLayoutDrop(PipelineLayout pipelineLayout);

		//[LinkName("wgpuBindGroupDrop")]
		//public static extern void BindGroupDrop(BindGroup bindGroup);

		//[LinkName("wgpuShaderModuleDrop")]
		//public static extern void ShaderModuleDrop(ShaderModule shaderModule);

		//[LinkName("wgpuCommandBufferDrop")]
		//public static extern void CommandBufferDrop(CommandBuffer commandBuffer);

		//[LinkName("wgpuRenderBundleDrop")]
		//public static extern void RenderBundleDrop(RenderBundle renderBundle);

		//[LinkName("wgpuComputePipelineDrop")]
		//public static extern void ComputePipelineDrop(ComputePipeline computePipeline);
	}
}
